(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{18:function(e,t,r){"use strict";r.d(t,"a",function(){return o});var i=r(17);var o=function e(t){var r=t.size,o=void 0===r?5:r,a=t.material,n=t.position;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var s=1,h=1,c=1;this.color=new i.Color,this.color.setRGB(s,h,c),this.material=a||new i.MeshBasicMaterial({color:this.color}),this.geometry=new i.BoxGeometry(o,o,o),this.mesh=new i.Mesh(this.geometry,this.material),n&&this.mesh.position.copy(n),this.root=this.mesh}},19:function(e,t,r){"use strict";r.d(t,"a",function(){return h});var i=r(17);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function n(e){return(n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=a(this,n(t).call(this));var r=new i.HemisphereLight(16777215,16777215,3);return r.color.setHSL(Math.NormalizeHue(325),.1,.94),r.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),r.position.set(0,2,0),e.add(r),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,i["Group"]),t}()},21:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var i=r(17);r(19);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,n=new Array(o),c=0;c<o;c++)n[c]=arguments[c];r=s(this,(e=h(t)).call.apply(e,[this].concat(n)));var l=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),i.forEach(function(t){a(e,t,r[t])})}return e}({},u,n[0]),d=l.intensity,p=l.castShadow,f=l.bias,m=l.projectionSides,v=l.mapSize;r.intensity=d,r.projectionSides=m,r.mapSize=v;var g=new i.DirectionalLight("white",.65*r.intensity),y=new i.DirectionalLight("white",.55*r.intensity);return g.shadow.bias=f||0,y.shadow.bias=f||0,g.castShadow=p,y.castShadow=p,r.updateProjection(g,r.projectionSides),r.updateProjection(y,r.projectionSides),r.updateShadowMap(g,r.mapSize),r.updateShadowMap(g,r.mapSize),g.position.copy(new i.Vector3(9,3.5,0)),y.position.copy(new i.Vector3(-10,2,0)),r.add(g,y),r}var r,o,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,i["Group"]),r=t,(o=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&n(r.prototype,o),l&&n(r,l),t}()},22:function(e,t,r){"use strict";r.d(t,"a",function(){return o});var i=r(17);var o=function e(t){var r=t.size,o=void 0===r?5:r,a=t.material,n=t.position,s=t.widthSegments,h=t.heightSegments,c=t.castShadow,u=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,d=1,p=1;this.color=new i.Color,this.color.setRGB(l,d,p),this.material=a||new i.MeshBasicMaterial({color:this.color});var f=this.material.length>1?i.SphereBufferGeometry:i.SphereGeometry;if(this.geometry=new f(o,s||7,h||9),this.material.length){this.geometry.clearGroups();for(var m=0;m<a.length;m++)this.geometry.addGroup(0,1/0,m)}this.mesh=new i.Mesh(this.geometry,this.material),this.mesh.castShadow=c,this.mesh.receiveShadow=u,n&&this.mesh.position.copy(n),this.root=this.mesh}},23:function(e,t,r){"use strict";function i(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,o,a){var n=this;this.onError=a||i;var s=new e.FileLoader(n.manager);s.setPath(this.path),s.load(t,function(e){r(n.parse(e))},o,a)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var i={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var i=r.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var i=this.vertices,o=this.object.geometry.vertices;o.push(i[e+0]),o.push(i[e+1]),o.push(i[e+2]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[t+2]),o.push(i[r+0]),o.push(i[r+1]),o.push(i[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var i=this.normals,o=this.object.geometry.normals;o.push(i[e+0]),o.push(i[e+1]),o.push(i[e+2]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[t+2]),o.push(i[r+0]),o.push(i[r+1]),o.push(i[r+2])},addUV:function(e,t,r){var i=this.uvs,o=this.object.geometry.uvs;o.push(i[e+0]),o.push(i[e+1]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[r+0]),o.push(i[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,i,o,a,n,s,h,c,u,l){var d,p=this.vertices.length,f=this.parseVertexIndex(e,p),m=this.parseVertexIndex(t,p),v=this.parseVertexIndex(r,p);if(void 0===i?this.addVertex(f,m,v):(d=this.parseVertexIndex(i,p),this.addVertex(f,m,d),this.addVertex(m,v,d)),void 0!==o){var g=this.uvs.length;f=this.parseUVIndex(o,g),m=this.parseUVIndex(a,g),v=this.parseUVIndex(n,g),void 0===i?this.addUV(f,m,v):(d=this.parseUVIndex(s,g),this.addUV(f,m,d),this.addUV(m,v,d))}if(void 0!==h){var y=this.normals.length;f=this.parseNormalIndex(h,y),m=h===c?f:this.parseNormalIndex(c,y),v=h===u?f:this.parseNormalIndex(u,y),void 0===i?this.addNormal(f,m,v):(d=this.parseNormalIndex(l,y),this.addNormal(f,m,d),this.addNormal(m,v,d))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,i=this.uvs.length,o=0,a=e.length;o<a;o++)this.addVertexLine(this.parseVertexIndex(e[o],r));var n=0;for(a=t.length;n<a;n++)this.addUVLine(this.parseUVIndex(t[n],i))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var i=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var o=t.split("\n"),a="",n="",s="",h=[],c="function"==typeof"".trimLeft,u=0,l=o.length;u<l;u++)if(a=o[u],0!==(a=c?a.trimLeft():a.trim()).length&&"#"!==(n=a.charAt(0)))if("v"===n)" "===(s=a.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(a))?i.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===s&&null!==(h=this.regexp.normal_pattern.exec(a))?i.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===s&&null!==(h=this.regexp.uv_pattern.exec(a))?i.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+a+"'");else if("f"===n)null!==(h=this.regexp.face_vertex_uv_normal.exec(a))?i.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(a))?i.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(a))?i.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(a))?i.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+a+"'");else if("l"===n){var d=a.substring(1).trim().split(" "),p=[],f=[];if(-1===a.indexOf("/"))p=d;else for(var m=0,v=d.length;m<v;m++){var g=d[m].split("/");""!==g[0]&&p.push(g[0]),""!==g[1]&&f.push(g[1])}i.addLineGeometry(p,f)}else if(null!==(h=this.regexp.object_pattern.exec(a))){var y=(" "+h[0].substr(1).trim()).substr(1);i.startObject(y)}else if(this.regexp.material_use_pattern.test(a))i.object.startMaterial(a.substring(7).trim(),i.materialLibraries);else if(this.regexp.material_library_pattern.test(a))i.materialLibraries.push(a.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(a))){var b=h[1].trim().toLowerCase();i.object.smooth="1"===b||"on"===b,(B=i.object.currentMaterial())&&(B.smooth=i.object.smooth)}else{if("\0"===a)continue;this.onError("Unexpected line: '"+a+"'")}i.finalize();var w=new e.Group;w.materialLibraries=[].concat(i.materialLibraries);for(u=0,l=i.objects.length;u<l;u++){var S=i.objects[u],x=S.geometry,j=S.materials,_="Line"===x.type;if(0!==x.vertices.length){var M=new e.BufferGeometry;M.addAttribute("position",new e.BufferAttribute(new Float32Array(x.vertices),3)),x.normals.length>0?M.addAttribute("normal",new e.BufferAttribute(new Float32Array(x.normals),3)):M.computeVertexNormals(),x.uvs.length>0&&M.addAttribute("uv",new e.BufferAttribute(new Float32Array(x.uvs),2));for(var O,L=[],V=0,C=j.length;V<C;V++){var E=j[V],B=void 0;if(null!==this.materials&&(B=this.materials.create(E.name),_&&B&&!(B instanceof e.LineBasicMaterial))){var P=new e.LineBasicMaterial;P.copy(B),B=P}B||((B=_?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=E.name),B.shading=E.smooth?e.SmoothShading:e.FlatShading,L.push(B)}if(L.length>1){for(V=0,C=j.length;V<C;V++){E=j[V];M.addGroup(E.groupStart,E.groupCount,V)}var z=new e.MultiMaterial(L);O=_?new e.LineSegments(M,z):new e.Mesh(M,z)}else O=_?new e.LineSegments(M,L[0]):new e.Mesh(M,L[0]);O.name=S.name,w.add(O)}}return r&&console.timeEnd("OBJLoader"),w}}}},28:function(e,t,r){e.exports=r.p+"obj/male.obj"},5:function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return l});var i=r(17),o=r(28),a=r.n(o),n=r(21),s=r(22),h=r(18),c=r(23);function u(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}c(i);var l=function(){function e(t){var r=t.scene,o=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=r,this.setupCamera(),r.renderer.shadowMap.enabled=!0,r.renderer.shadowMap.type=i.PCFSoftShadowMap,this.root=new i.Group,this.wireMat=new i.MeshBasicMaterial({color:16777215,wireframe:!0});var a=new i.MeshStandardMaterial({emissive:6161169,flatShading:!0});this.loadingCube=new h.a({size:6,material:a}),this.root.add(this.loadingCube.root),this.loading(.5),this.setupLights(),this.createSpheres(),this.loadHead(),o&&o()}var t,r,o;return t=e,(r=[{key:"loading",value:function(e){this.loadingCube.root.scale.copy(new i.Vector3(1,1-e,1)),this.loadingCube.root.position.copy(new i.Vector3(0,-.5*this.loadingCube.root.geometry.parameters.height*e,0));var t=new i.Quaternion;t.setFromAxisAngle(new i.Vector3(0,1,0),-2*Math.PI*e),this.loadingCube.root.quaternion.copy(t)}},{key:"setupLights",value:function(){var e=new n.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){var e=this.scene.camera.aspect;this.scene.camera=new i.OrthographicCamera(10*e/-2,10*e/2,5,-5,1,150),this.scene.camera.position.copy(new i.Vector3(0,3.5,10)),this.scene.camera.lookAt(new i.Vector3(0,0,0))}},{key:"createSpheres",value:function(){var e=[new i.MeshStandardMaterial({flatShading:!0,roughness:0}),this.wireMat],t=[new i.MeshStandardMaterial({emissive:6161169,flatShading:!0}),this.wireMat];this.spheres=new i.Group,this.sphereA=new s.a({size:8,widthSegments:6,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereA.root.position.copy(new i.Vector3(2.5,0,3)),this.sphereB=new s.a({size:7,widthSegments:7,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereB.root.position.copy(new i.Vector3(2,.5,-7)),this.sphereC=new s.a({size:5,widthSegments:5,heightSegments:4,material:t,castShadow:!0,receiveShadow:!0}),this.sphereC.root.position.copy(new i.Vector3(-6.5,.5,-1)),this.spheres.add(this.sphereA.root),this.spheres.add(this.sphereB.root),this.spheres.add(this.sphereC.root),this.spheres.position.copy(new i.Vector3(0,8,0))}},{key:"loadHead",value:function(){var e=new i.OBJLoader;this.onHeadReady=this.onHeadReady.bind(this),this.onHeadLoading=this.onHeadLoading.bind(this),e.load(a.a,this.onHeadReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded"),this.loading(Math.sin(t))}},{key:"onHeadReady",value:function(e){this.root.remove(this.loadingCube.root),this.loadingCube=null,e.scale.copy(new i.Vector3(.2,.2,.2)),e.traverse(function(e){e.receiveShadow=!0,e.castShadow=!0,e.name&&e.name.indexOf("occhio")>=0&&(e.material.color.setRGB(0,0,0),e.material.specular.setRGB(.1,.1,.1),e.material.roughness=0)}),this.root.add(e),this.head=e,this.head.rotateY(-.25*Math.PI),this.head.add(this.spheres)}},{key:"update",value:function(e,t){if(this.head){var r=.1*e;this.head.rotateY(Math.sin(r)*t*.1),this.sphereA.root.rotateY(.3*t),this.sphereA.root.rotateX(.6*t),this.sphereB.root.rotateY(-.4*t),this.sphereB.root.rotateX(-.6*t),this.sphereC.root.rotateY(-.4*t),this.sphereC.root.rotateX(.6*t),this.sphereC.root.rotateZ(.9*t)}}}])&&u(t.prototype,r),o&&u(t,o),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
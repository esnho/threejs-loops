(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{19:function(e,t,r){"use strict";r.d(t,"a",function(){return u});var n=r(17);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=i(this,a(t).call(this));var r=new n.HemisphereLight(16777215,16777215,3);return r.color.setHSL(Math.NormalizeHue(325),.1,.94),r.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),r.position.set(0,2,0),e.add(r),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,n["Group"]),t}()},21:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var n=r(17);r(19);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=new Array(o),c=0;c<o;c++)a[c]=arguments[c];r=s(this,(e=u(t)).call.apply(e,[this].concat(a)));var l=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){i(e,t,r[t])})}return e}({},h,a[0]),p=l.intensity,d=l.castShadow,f=l.bias,m=l.projectionSides,v=l.mapSize;r.intensity=p,r.projectionSides=m,r.mapSize=v;var b=new n.DirectionalLight("white",.65*r.intensity),y=new n.DirectionalLight("white",.55*r.intensity);return b.shadow.bias=f||0,y.shadow.bias=f||0,b.castShadow=d,y.castShadow=d,r.updateProjection(b,r.projectionSides),r.updateProjection(y,r.projectionSides),r.updateShadowMap(b,r.mapSize),r.updateShadowMap(b,r.mapSize),b.position.copy(new n.Vector3(9,3.5,0)),y.position.copy(new n.Vector3(-10,2,0)),r.add(b,y),r}var r,o,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,n["Group"]),r=t,(o=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(r.prototype,o),l&&a(r,l),t}()},23:function(e,t,r){"use strict";function n(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,o,i){var a=this;this.onError=i||n;var s=new e.FileLoader(a.manager);s.setPath(this.path),s.load(t,function(e){r(a.parse(e))},o,i)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var n={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var n=r.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var n=this.vertices,o=this.object.geometry.vertices;o.push(n[e+0]),o.push(n[e+1]),o.push(n[e+2]),o.push(n[t+0]),o.push(n[t+1]),o.push(n[t+2]),o.push(n[r+0]),o.push(n[r+1]),o.push(n[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var n=this.normals,o=this.object.geometry.normals;o.push(n[e+0]),o.push(n[e+1]),o.push(n[e+2]),o.push(n[t+0]),o.push(n[t+1]),o.push(n[t+2]),o.push(n[r+0]),o.push(n[r+1]),o.push(n[r+2])},addUV:function(e,t,r){var n=this.uvs,o=this.object.geometry.uvs;o.push(n[e+0]),o.push(n[e+1]),o.push(n[t+0]),o.push(n[t+1]),o.push(n[r+0]),o.push(n[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,n,o,i,a,s,u,c,h,l){var p,d=this.vertices.length,f=this.parseVertexIndex(e,d),m=this.parseVertexIndex(t,d),v=this.parseVertexIndex(r,d);if(void 0===n?this.addVertex(f,m,v):(p=this.parseVertexIndex(n,d),this.addVertex(f,m,p),this.addVertex(m,v,p)),void 0!==o){var b=this.uvs.length;f=this.parseUVIndex(o,b),m=this.parseUVIndex(i,b),v=this.parseUVIndex(a,b),void 0===n?this.addUV(f,m,v):(p=this.parseUVIndex(s,b),this.addUV(f,m,p),this.addUV(m,v,p))}if(void 0!==u){var y=this.normals.length;f=this.parseNormalIndex(u,y),m=u===c?f:this.parseNormalIndex(c,y),v=u===h?f:this.parseNormalIndex(h,y),void 0===n?this.addNormal(f,m,v):(p=this.parseNormalIndex(l,y),this.addNormal(f,m,p),this.addNormal(m,v,p))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,n=this.uvs.length,o=0,i=e.length;o<i;o++)this.addVertexLine(this.parseVertexIndex(e[o],r));var a=0;for(i=t.length;a<i;a++)this.addUVLine(this.parseUVIndex(t[a],n))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var n=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var o=t.split("\n"),i="",a="",s="",u=[],c="function"==typeof"".trimLeft,h=0,l=o.length;h<l;h++)if(i=o[h],0!==(i=c?i.trimLeft():i.trim()).length&&"#"!==(a=i.charAt(0)))if("v"===a)" "===(s=i.charAt(1))&&null!==(u=this.regexp.vertex_pattern.exec(i))?n.vertices.push(parseFloat(u[1]),parseFloat(u[2]),parseFloat(u[3])):"n"===s&&null!==(u=this.regexp.normal_pattern.exec(i))?n.normals.push(parseFloat(u[1]),parseFloat(u[2]),parseFloat(u[3])):"t"===s&&null!==(u=this.regexp.uv_pattern.exec(i))?n.uvs.push(parseFloat(u[1]),parseFloat(u[2])):this.onError("Unexpected vertex/normal/uv line: '"+i+"'");else if("f"===a)null!==(u=this.regexp.face_vertex_uv_normal.exec(i))?n.addFace(u[1],u[4],u[7],u[10],u[2],u[5],u[8],u[11],u[3],u[6],u[9],u[12]):null!==(u=this.regexp.face_vertex_uv.exec(i))?n.addFace(u[1],u[3],u[5],u[7],u[2],u[4],u[6],u[8]):null!==(u=this.regexp.face_vertex_normal.exec(i))?n.addFace(u[1],u[3],u[5],u[7],void 0,void 0,void 0,void 0,u[2],u[4],u[6],u[8]):null!==(u=this.regexp.face_vertex.exec(i))?n.addFace(u[1],u[2],u[3],u[4]):this.onError("Unexpected face line: '"+i+"'");else if("l"===a){var p=i.substring(1).trim().split(" "),d=[],f=[];if(-1===i.indexOf("/"))d=p;else for(var m=0,v=p.length;m<v;m++){var b=p[m].split("/");""!==b[0]&&d.push(b[0]),""!==b[1]&&f.push(b[1])}n.addLineGeometry(d,f)}else if(null!==(u=this.regexp.object_pattern.exec(i))){var y=(" "+u[0].substr(1).trim()).substr(1);n.startObject(y)}else if(this.regexp.material_use_pattern.test(i))n.object.startMaterial(i.substring(7).trim(),n.materialLibraries);else if(this.regexp.material_library_pattern.test(i))n.materialLibraries.push(i.substring(7).trim());else if(null!==(u=this.regexp.smoothing_pattern.exec(i))){var g=u[1].trim().toLowerCase();n.object.smooth="1"===g||"on"===g,(I=n.object.currentMaterial())&&(I.smooth=n.object.smooth)}else{if("\0"===i)continue;this.onError("Unexpected line: '"+i+"'")}n.finalize();var w=new e.Group;w.materialLibraries=[].concat(n.materialLibraries);for(h=0,l=n.objects.length;h<l;h++){var x=n.objects[h],j=x.geometry,_=x.materials,S="Line"===j.type;if(0!==j.vertices.length){var L=new e.BufferGeometry;L.addAttribute("position",new e.BufferAttribute(new Float32Array(j.vertices),3)),j.normals.length>0?L.addAttribute("normal",new e.BufferAttribute(new Float32Array(j.normals),3)):L.computeVertexNormals(),j.uvs.length>0&&L.addAttribute("uv",new e.BufferAttribute(new Float32Array(j.uvs),2));for(var O,M=[],V=0,E=_.length;V<E;V++){var P=_[V],I=void 0;if(null!==this.materials&&(I=this.materials.create(P.name),S&&I&&!(I instanceof e.LineBasicMaterial))){var F=new e.LineBasicMaterial;F.copy(I),I=F}I||((I=S?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=P.name),I.shading=P.smooth?e.SmoothShading:e.FlatShading,M.push(I)}if(M.length>1){for(V=0,E=_.length;V<E;V++){P=_[V];L.addGroup(P.groupStart,P.groupCount,V)}var z=new e.MultiMaterial(M);O=S?new e.LineSegments(L,z):new e.Mesh(L,z)}else O=S?new e.LineSegments(L,M[0]):new e.Mesh(L,M[0]);O.name=x.name,w.add(O)}}return r&&console.timeEnd("OBJLoader"),w}}}},34:function(e,t,r){e.exports=r.p+"obj/Lowpoly_tree_sample.obj"},8:function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return c});var n=r(17),o=r(34),i=r.n(o),a=r(21),s=r(23);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}s(n);var c=function(){function e(t){var r=t.scene,o=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=r,this.setupCamera(),r.renderer.shadowMap.enabled=!0,r.renderer.shadowMap.type=n.PCFSoftShadowMap,this.root=new n.Group,this.loadTree(),this.setupLights(),o&&o()}var t,r,o;return t=e,(r=[{key:"loading",value:function(e){}},{key:"setupLights",value:function(){var e=new a.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){var e=this.scene.camera.aspect;this.scene.camera=new n.OrthographicCamera(10*e/-2,10*e/2,5,-5,1,150),this.scene.camera.position.copy(new n.Vector3(0,3.5,10)),this.scene.camera.lookAt(new n.Vector3(0,0,0))}},{key:"loadTree",value:function(){var e=new n.OBJLoader;this.onHeadReady=this.onTreeReady.bind(this),this.onHeadLoading=this.onHeadLoading.bind(this),this.onTreeReady=this.onTreeReady.bind(this),e.load(i.a,this.onTreeReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded"),this.loading(Math.sin(t))}},{key:"onTreeReady",value:function(e){for(var t=0;t<10;t++){var r=new n.Vector3(3*t,0,0);this.addTree(e,r)}}},{key:"addTree",value:function(e,t){var r=e.clone();r.position.copy(t),r.scale.copy(new n.Vector3(.2,.2,.2)),r.children[0].material[0].color.setRGB(1,.6,0),r.children[0].material[1].color.setRGB(.8,1,.2),this.root.add(r)}},{key:"update",value:function(e,t){var r=0;this.root.traverse(function(t){var n=t.scale.clone();n.y=Math.abs(Math.sin(e+r))+.2,t.scale.copy(n),r++})}}])&&u(t.prototype,r),o&&u(t,o),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
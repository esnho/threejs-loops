(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{10:function(t,e,o){"use strict";o.r(e);var r=o(29),n=(o(36),o(32));var a=function t(e){var o=e.radius,n=void 0===o?5:o,a=e.tube,i=void 0===a?.4:a,s=e.radialSegments,u=void 0===s?8:s,c=e.tubularSegments,l=void 0===c?6:c,h=e.arc,f=void 0===h?2*Math.PI:h,p=e.material,d=e.materialGroups,y=e.position,m=e.rotation,w=e.castShadow,b=e.receiveShadow;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var v=1,g=1,S=1;this.color=new r.Color,this.color.setRGB(v,g,S),this.material=p||new r.MeshBasicMaterial({color:this.color});var M=this.material.length>1?r.TorusBufferGeometry:r.TorusGeometry;if(this.geometry=new M(n,i,u,l,f),this.material.length)if(this.geometry.clearGroups(),d){var j=!0,O=!1,P=void 0;try{for(var _,k=d[Symbol.iterator]();!(j=(_=k.next()).done);j=!0){var R=_.value;console.log(this.geometry),this.geometry.addGroup(R.start,R.count,R.id)}}catch(t){O=!0,P=t}finally{try{j||null==k.return||k.return()}finally{if(O)throw P}}}else for(var E=0;E<p.length;E++)this.geometry.addGroup(0,1/0,E);this.mesh=new r.Mesh(this.geometry,this.material),this.mesh.castShadow=w,this.mesh.receiveShadow=b,y&&this.mesh.position.copy(y),m&&this.mesh.rotation.setFromQuaternion(m),this.root=this.mesh};o(35);function i(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}o.d(e,"default",function(){return s});var s=function(){function t(e){var o=e.scene,n=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scene=o,this.setupCamera(),o.renderer.shadowMap.enabled=!0,o.renderer.shadowMap.type=r.PCFShadowMap,this.root=new r.Group,this.setupLights(),this.setupTunnel(),this.tRays=new r.Group,this.tRaysMat=new r.MeshBasicMaterial({side:r.DoubleSide});for(var i=0;i<18;i++){var s=new r.Quaternion;s.setFromEuler(new r.Euler(.5*Math.PI,.17*(Math.random()-.5),Math.random()),!0);var u=new a({radius:15+5.5*(Math.random()-.5),tube:.2,tubularSegments:46,radialSegments:6,rotation:s,material:this.tRaysMat,position:new r.Vector3(0,1.5-3*Math.random(),0)});u.geometry.faces=u.geometry.faces.map(function(t,e){if(e%6==0&&e%13==0)return t}).filter(function(t){return null!=t}),u.geometry.elementsNeedUpdate=!0,this.tRays.add(u.root)}this.root.add(this.tRays),n&&n()}var e,o,s;return e=t,(o=[{key:"setupTunnel",value:function(){var t=new r.MeshStandardMaterial({color:6161169,flatShading:!0,side:r.CullFaceFront});t.color.setRGB(157/255,239/255,247/255),this.torusRotation=new r.Quaternion,this.torusRotation.setFromEuler(new r.Euler(.5*Math.PI,0,0),!0);var e=new r.MeshBasicMaterial({wireframe:!0});this.torus=new a({radius:15,tube:2.8,material:[t,e],tubularSegments:64,radialSegments:24,rotation:this.torusRotation,materialGroups:[{start:0,count:1/0,id:1}]}),this.root.add(this.torus.root)}},{key:"setupLights",value:function(){this.lights=new n.a({intensity:.6}),this.lights.rotateY(Math.PI),this.root.add(this.lights)}},{key:"loading",value:function(t){}},{key:"setupCamera",value:function(){this.scene.camera.position.copy(new r.Vector3(-14.8,0,0)),this.scene.camera.near=.001,this.scene.camera.updateProjectionMatrix()}},{key:"onHeadLoading",value:function(t){var e=t.loaded/t.total;console.log(100*e+"% loaded"),this.loading(Math.sin(e))}},{key:"onTreeReady",value:function(t){}},{key:"addTree",value:function(t,e,o){}},{key:"update",value:function(t,e){this.torus.root.rotateZ(-.5*e);for(var o=0;o<this.tRays.children.length;o++)this.tRays.children[o].rotateZ(1.4*e+.001*o);this.scene.camera.rotateZ(Math.sin(t)*(-.02*Math.cos(.1*t))),this.lights.rotateX(Math.sin(t)*(-.02*Math.cos(.1*t)))}}])&&i(e.prototype,o),s&&i(e,s),t}()},31:function(t,e,o){"use strict";o.d(e,"a",function(){return u});var r=o(29);function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function i(t){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var u=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=a(this,i(e).call(this));var o=new r.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),t.add(o),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,r["Group"]),e}()},32:function(t,e,o){"use strict";o.d(e,"a",function(){return h});var r=o(29);o(31);function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function i(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var l={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},h=function(t){function e(){var t,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var n=arguments.length,i=new Array(n),c=0;c<n;c++)i[c]=arguments[c];o=s(this,(t=u(e)).call.apply(t,[this].concat(i)));var h=function(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},r=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),r.forEach(function(e){a(t,e,o[e])})}return t}({},l,i[0]),f=h.intensity,p=h.castShadow,d=h.bias,y=h.projectionSides,m=h.mapSize;o.intensity=f,o.projectionSides=y,o.mapSize=m,console.log("mapsize",o.mapSize);var w=new r.DirectionalLight("white",.65*o.intensity),b=new r.DirectionalLight("white",.55*o.intensity);return w.shadow.bias=d||0,b.shadow.bias=d||0,w.castShadow=p,b.castShadow=p,o.updateProjection(w,o.projectionSides),o.updateProjection(b,o.projectionSides),o.updateShadowMap(w,o.mapSize),o.updateShadowMap(b,o.mapSize),w.position.copy(new r.Vector3(9,3.5,0)),b.position.copy(new r.Vector3(-10,2,0)),o.add(w,b),o}var o,n,h;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,r["Group"]),o=e,(n=[{key:"updateProjection",value:function(t,e){t.shadow.camera.left=-e,t.shadow.camera.right=e,t.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(t,e){t.shadow.mapSize.width=e,t.shadow.mapSize.height=e}}])&&i(o.prototype,n),h&&i(o,h),e}()},36:function(t,e,o){t.exports=o.p+"obj/Lowpoly_tree_sample.obj"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{30:function(e,t,o){"use strict";o.d(t,"a",function(){return n});var r=o(29);var n=function e(t){var o=t.size,n=void 0===o?5:o,i=t.material,a=t.position;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var s=1,h=1,c=1;this.color=new r.Color,this.color.setRGB(s,h,c),this.material=i||new r.MeshBasicMaterial({color:this.color}),this.geometry=new r.BoxGeometry(n,n,n),this.mesh=new r.Mesh(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},31:function(e,t,o){"use strict";o.d(t,"a",function(){return h});var r=o(29);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=i(this,a(t).call(this));var o=new r.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),e.add(o),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r["Group"]),t}()},32:function(e,t,o){"use strict";o.d(t,"a",function(){return p});var r=o(29);o(31);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},p=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,a=new Array(n),c=0;c<n;c++)a[c]=arguments[c];o=s(this,(e=h(t)).call.apply(e,[this].concat(a)));var p=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},r=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),r.forEach(function(t){i(e,t,o[t])})}return e}({},u,a[0]),l=p.intensity,d=p.castShadow,f=p.bias,w=p.projectionSides,y=p.mapSize;o.intensity=l,o.projectionSides=w,o.mapSize=y,console.log("mapsize",o.mapSize);var m=new r.DirectionalLight("white",.65*o.intensity),b=new r.DirectionalLight("white",.55*o.intensity);return m.shadow.bias=f||0,b.shadow.bias=f||0,m.castShadow=d,b.castShadow=d,o.updateProjection(m,o.projectionSides),o.updateProjection(b,o.projectionSides),o.updateShadowMap(m,o.mapSize),o.updateShadowMap(b,o.mapSize),m.position.copy(new r.Vector3(9,3.5,0)),b.position.copy(new r.Vector3(-10,2,0)),o.add(m,b),o}var o,n,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,r["Group"]),o=t,(n=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(o.prototype,n),p&&a(o,p),t}()},34:function(e,t,o){"use strict";o.d(t,"a",function(){return n});var r=o(29);var n=function e(t){var o=t.size,n=void 0===o?5:o,i=t.material,a=t.position,s=t.widthSegments,h=t.heightSegments,c=t.castShadow,u=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var p=1,l=1,d=1;this.color=new r.Color,this.color.setRGB(p,l,d),this.material=i||new r.MeshBasicMaterial({color:this.color});var f=this.material.length>1?r.SphereBufferGeometry:r.SphereGeometry;if(this.geometry=new f(n,s||7,h||9),this.material.length){this.geometry.clearGroups();for(var w=0;w<i.length;w++)this.geometry.addGroup(0,1/0,w)}this.mesh=new r.Mesh(this.geometry,this.material),this.mesh.castShadow=c,this.mesh.receiveShadow=u,a&&this.mesh.position.copy(a),this.root=this.mesh}},41:function(e,t,o){e.exports=o.p+"obj/male.obj"},5:function(e,t,o){"use strict";o.r(t),o.d(t,"default",function(){return p});var r=o(29),n=o(41),i=o.n(n),a=o(32),s=o(34),h=o(30),c=o(35);function u(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t){var o=t.scene,n=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=o,this.setupCamera(),o.renderer.shadowMap.enabled=!0,o.renderer.shadowMap.type=void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")?r.BasicShadowMap:r.PCFSoftShadowMap,this.root=new r.Group,this.wireMat=new r.MeshBasicMaterial({color:16777215,wireframe:!0});var i=new r.MeshStandardMaterial({emissive:6161169,flatShading:!0});this.loadingCube=new h.a({size:6,material:i}),this.root.add(this.loadingCube.root),this.loading(.5),this.setupLights(),this.createSpheres(),this.loadHead(),n&&n()}var t,o,n;return t=e,(o=[{key:"loading",value:function(e){this.loadingCube.root.scale.copy(new r.Vector3(1,1-e,1)),this.loadingCube.root.position.copy(new r.Vector3(0,-.5*this.loadingCube.root.geometry.parameters.height*e,0));var t=new r.Quaternion;t.setFromAxisAngle(new r.Vector3(0,1,0),-2*Math.PI*e),this.loadingCube.root.quaternion.copy(t)}},{key:"setupLights",value:function(){var e=new a.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){var e=this.scene.camera.aspect;this.scene.camera=new r.OrthographicCamera(10*e/-2,10*e/2,5,-5,1,150),this.scene.camera.position.copy(new r.Vector3(0,3.5,10)),this.scene.camera.lookAt(new r.Vector3(0,0,0))}},{key:"createSpheres",value:function(){var e=[new r.MeshStandardMaterial({flatShading:!0,roughness:0}),this.wireMat],t=[new r.MeshStandardMaterial({emissive:6161169,flatShading:!0}),this.wireMat];this.spheres=new r.Group,this.sphereA=new s.a({size:8,widthSegments:6,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereA.root.position.copy(new r.Vector3(2.5,0,3)),this.sphereB=new s.a({size:7,widthSegments:7,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereB.root.position.copy(new r.Vector3(2,.5,-7)),this.sphereC=new s.a({size:5,widthSegments:5,heightSegments:4,material:t,castShadow:!0,receiveShadow:!0}),this.sphereC.root.position.copy(new r.Vector3(-6.5,.5,-1)),this.spheres.add(this.sphereA.root),this.spheres.add(this.sphereB.root),this.spheres.add(this.sphereC.root),this.spheres.position.copy(new r.Vector3(0,8,0))}},{key:"loadHead",value:function(){var e=new c.OBJLoader;this.onHeadReady=this.onHeadReady.bind(this),this.onHeadLoading=this.onHeadLoading.bind(this),e.load(i.a,this.onHeadReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded"),this.loading(Math.sin(t))}},{key:"onHeadReady",value:function(e){this.root.remove(this.loadingCube.root),this.loadingCube=null,e.scale.copy(new r.Vector3(.2,.2,.2)),e.traverse(function(e){e.receiveShadow=!0,e.castShadow=!0,e.name&&e.name.indexOf("occhio")>=0&&(e.material.color.setRGB(0,0,0),e.material.specular.setRGB(.1,.1,.1),e.material.roughness=0)}),this.root.add(e),this.head=e,this.head.rotateY(-.25*Math.PI),this.head.add(this.spheres)}},{key:"update",value:function(e,t){if(this.head){var o=.1*e;this.head.rotateY(Math.sin(o)*t*.1),this.sphereA.root.rotateY(.3*t),this.sphereA.root.rotateX(.6*t),this.sphereB.root.rotateY(-.4*t),this.sphereB.root.rotateX(-.6*t),this.sphereC.root.rotateY(-.4*t),this.sphereC.root.rotateX(.6*t),this.sphereC.root.rotateZ(.9*t)}}}])&&u(t.prototype,o),n&&u(t,n),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
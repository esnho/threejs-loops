(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{31:function(e,t,o){"use strict";o.d(t,"a",function(){return c});var n=o(29);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=i(this,a(t).call(this));var o=new n.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),e.add(o),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,n["Group"]),t}()},32:function(e,t,o){"use strict";o.d(t,"a",function(){return l});var n=o(29);o(31);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=new Array(r),h=0;h<r;h++)a[h]=arguments[h];o=s(this,(e=c(t)).call.apply(e,[this].concat(a)));var l=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},n=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),n.forEach(function(t){i(e,t,o[t])})}return e}({},u,a[0]),p=l.intensity,f=l.castShadow,d=l.bias,y=l.projectionSides,m=l.mapSize;o.intensity=p,o.projectionSides=y,o.mapSize=m,console.log("mapsize",o.mapSize);var w=new n.DirectionalLight("white",.65*o.intensity),b=new n.DirectionalLight("white",.55*o.intensity);return w.shadow.bias=d||0,b.shadow.bias=d||0,w.castShadow=f,b.castShadow=f,o.updateProjection(w,o.projectionSides),o.updateProjection(b,o.projectionSides),o.updateShadowMap(w,o.mapSize),o.updateShadowMap(b,o.mapSize),w.position.copy(new n.Vector3(9,3.5,0)),b.position.copy(new n.Vector3(-10,2,0)),o.add(w,b),o}var o,r,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,n["Group"]),o=t,(r=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(o.prototype,r),l&&a(o,l),t}()},34:function(e,t,o){"use strict";o.d(t,"a",function(){return r});var n=o(29);var r=function e(t){var o=t.size,r=void 0===o?5:o,i=t.material,a=t.position,s=t.widthSegments,c=t.heightSegments,h=t.castShadow,u=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,p=1,f=1;this.color=new n.Color,this.color.setRGB(l,p,f),this.material=i||new n.MeshBasicMaterial({color:this.color});var d=this.material.length>1?n.SphereBufferGeometry:n.SphereGeometry;if(this.geometry=new d(r,s||7,c||9),this.material.length){this.geometry.clearGroups();for(var y=0;y<i.length;y++)this.geometry.addGroup(0,1/0,y)}this.mesh=new n.Mesh(this.geometry,this.material),this.mesh.castShadow=h,this.mesh.receiveShadow=u,a&&this.mesh.position.copy(a),this.root=this.mesh}},36:function(e,t,o){e.exports=o.p+"obj/Lowpoly_tree_sample.obj"},8:function(e,t,o){"use strict";o.r(t),o.d(t,"default",function(){return u});var n=o(29),r=o(36),i=o.n(r),a=o(32),s=o(34),c=o(35);function h(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t){var o=t.scene,r=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=o,this.setupCamera(),o.renderer.shadowMap.enabled=!0,o.renderer.shadowMap.type=n.PCFShadowMap,this.root=new n.Group,this.loadTree(),this.setupLights();var i=new n.MeshStandardMaterial({emissive:6161169,flatShading:!0});i.emissive.setRGB(157/255,239/255,247/255),this.sphere=new s.a({size:6,material:i,widthSegments:20,heightSegments:10,receiveShadow:!0}),this.sphere.root.rotateX(Math.PI/180*26),console.log(this.sphere.root.geometry),this.root.add(this.sphere.root),r&&r()}var t,o,r;return t=e,(o=[{key:"loading",value:function(e){}},{key:"setupLights",value:function(){var e=new a.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:6.5,mapSize:1024});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){this.scene.camera.position.copy(new n.Vector3(0,4.5,18)),this.scene.camera.lookAt(new n.Vector3(0,0,0))}},{key:"loadTree",value:function(){var e=new c.OBJLoader;this.onHeadReady=this.onTreeReady.bind(this),this.onHeadLoading=this.onHeadLoading.bind(this),this.onTreeReady=this.onTreeReady.bind(this),e.load(i.a,this.onTreeReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded"),this.loading(Math.sin(t))}},{key:"onTreeReady",value:function(e){e.traverse(function(e){e.castShadow=!0,e.receiveShadow=!0});for(var t=0;t<this.sphere.root.geometry.vertices.length;t++)this.addTree(e,this.sphere.root.geometry.vertices[t],.1)}},{key:"addTree",value:function(e,t,o){var r=e.clone();r.position.copy(t),r.scale.copy(new n.Vector3(o,o,o));var i=new n.Vector3(0,1,0);r.quaternion.setFromUnitVectors(i,t.sub(this.sphere.root.position).clone().normalize()),r.children[0].material[0].color.setRGB(1,.6,0),r.children[0].material[1].color.setRGB(224/255,252/255,1),r.children[0].material[1].emissive.setRGB(224/255*.2,252/255*.2,.2),r.rotateY(360*Math.random()),this.sphere.root.add(r)}},{key:"update",value:function(e,t){var o=new n.Color;this.sphere.root.material.emissive.getHSL(o),o.s=.5*(Math.sin(e+.27*Math.PI)+1),o.l=.1*(Math.cos(e)+1),this.sphere.root.material.emissive.setHSL(o.h,o.s,o.l);for(var r=0;r<this.sphere.root.children.length;r+=1){var i=this.sphere.root.children[r].children[0],a=i.position;a.y=30*Math.sin(e+.05*r),i.position.copy(a)}this.sphere.root.rotateY(.35*t)}}])&&h(t.prototype,o),r&&h(t,r),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
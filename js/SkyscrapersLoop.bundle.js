(window.webpackJsonp=window.webpackJsonp||[]).push([[5],[,,,,,function(t,e,o){"use strict";o.r(e);var n=o(14);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var o=new n.i(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),t.add(o),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,n["h"]),e}();function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=h(this,l(e).call(this));var o=new c;t.add(o);var r=new n.f("white",.65),i=new n.f("white",.55);return r.position.copy(new n.t(9,3.5,0)),i.position.copy(new n.t(-10,2,0)),t.add(r,i),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(e,n["h"]),e}(),d=o(15);var y=function t(e){var o=e.size,r=void 0===o?5:o,i=e.material,a=e.position,s=e.widthSegments,c=e.heightSegments;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var u=1,h=1,l=1;this.color=new n.d,this.color.setRGB(u,h,l),this.material=i||new n.l({color:this.color});var f=i.length>1?n.r:n.s;if(this.geometry=new f(r,s||7,c||9),i.length){this.geometry.clearGroups();for(var p=0;p<i.length;p++)this.geometry.addGroup(0,1/0,p)}this.mesh=new n.k(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh};function w(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}o.d(e,"default",function(){return m}),o(20);var m=function(){function t(e){var o=e.scene,r=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scene=o,this.editScene(),this.root=new n.h;var i=new p;this.root.add(i),this.addSkyscrapers(),this.addSky(),this.addGround(),this.addWhereAreYou(),r&&r()}var e,o,r;return e=t,(o=[{key:"editScene",value:function(){var t=this.scene.camera.aspect,e=new n.d;e.setIntHSL(244,30,8),this.scene.renderer.setClearColor(e),this.scene.camera=new n.n(7*t/-2,7*t/2,3.5,-3.5,.1,150),this.scene.camera.position.copy(new n.t(10,10,10)),this.scene.camera.lookAt(new n.t(0,0,0))}},{key:"addSkyscrapers",value:function(){var t=new n.m({color:4276048,metalness:.3,roughness:.2}),e=new n.l({color:2301751}),o=new n.l({color:13421789});this.cubes=[];this.cubesParent=new n.h;for(var r=-5;r<5;r++)for(var i=-5;i<5;i++){for(var a=new d.a({size:1,material:t,position:new n.t(1.5*r+(Math.random()-.5),0,1.5*i)}),s=0;s<80;s++){var c=Math.random()>.5?.5:-.5;if(!(c<0)){var u=.8*Math.random()-.4,h=Math.random()*(Math.random()>.5?.4:-.4);u=.1*Math.round(10*u),h=.2*Math.round(5*h);var l=new d.a({size:.05,material:Math.random()>.1?e:o,position:new n.t(h,u,c)});a.root.add(l.root)}}a.root.scale.copy(new n.t(1,2,1)),this.cubesParent.add(a.root),this.cubes.push(a)}this.root.add(this.cubesParent)}},{key:"addSky",value:function(){var t=new n.m({color:328489,metalness:.1,roughness:.9,side:n.a}),e=new n.l({color:13421789,side:n.a,wireframe:!0}),o=new y({size:5,position:new n.t(-.5,1,0),material:t,heightSegments:72,widthSegments:128});o.root.scale.copy(new n.t(10,9.25,10)),this.root.add(o.root);for(var r=0;r<120;r++){var i=Math.random()*Math.PI*2,a=Math.random()*Math.PI*.6,s=new y({size:.018,material:e,position:new n.t(20*Math.sin(i),8*Math.cos(a),-10)});this.root.add(s.root)}}},{key:"addGround",value:function(){var t=new n.m({color:1250067,metalness:.7,roughness:.9,flatShading:!0}),e=new y({size:3,position:new n.t(0,-1,0),material:t});e.root.scale.copy(new n.t(5,.5,4)),this.root.add(e.root)}},{key:"addWhereAreYou",value:function(){this.whereAreYou=document.createElement("h1"),this.whereAreYou.innerHTML="where are you",this.whereAreYou.style.margin="auto",this.whereAreYou.style.marginTop="30vh",this.whereAreYou.style.verticalAlign="middle",this.whereAreYou.style.fontFamily="'VT323', monospace",this.whereAreYou.style.color="antiquewhite",this.whereAreYou.style.fontWeight="lighter",this.whereAreYou.style.cursor="default",this.whereAreYou.style.letterSpacing="0.2em",document.body.appendChild(this.whereAreYou)}},{key:"update",value:function(t){var e=.2*t;this.updateSkyscrapers(e),this.updateCamera(t)}},{key:"updateSkyscrapers",value:function(t){for(var e=0;e<this.cubesParent.children.length;e++){var o=this.cubesParent.children[e],n=o.position;n.y=Math.sin(e*Math.PI*.25+t),o.position.copy(n)}}},{key:"updateCamera",value:function(t){this.scene.camera.position.copy(new n.t(10*Math.cos(.12*t)+2,Math.cos(.2*t)+1,30)),this.scene.camera.lookAt(new n.t(0,2.5,6)),this.scene.camera.updateProjectionMatrix()}},{key:"onRemove",value:function(){document.body.removeChild(this.whereAreYou)}}])&&w(e.prototype,o),r&&w(e,r),t}()},,,,,,,,,,function(t,e,o){"use strict";o.d(e,"a",function(){return r});var n=o(14);var r=function t(e){var o=e.size,r=void 0===o?5:o,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new n.d,this.color.setRGB(s,c,u),this.material=i||new n.l({color:this.color}),this.geometry=new n.b(r,r,r),this.mesh=new n.k(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},,,,,function(t,e,o){var n=o(21);"string"==typeof n&&(n=[[t.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};o(1)(n,r);n.locals&&(t.exports=n.locals)},function(t,e,o){e=t.exports=o(0)(!1);var n=o(22),r=n(o(23)),i=n(o(24));e.push([t.i,"/* vt323-400normal - latin */\n@font-face {\n  font-family: 'VT323';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('VT323 Regular '),\n    local('VT323-Regular'),\n    url("+r+") format('woff2'), \n    url("+i+") format('woff'); /* Modern Browsers */\n}\n\n",""])},function(t,e,o){"use strict";t.exports=function(t,e){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)||e?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,e,o){t.exports=o.p+"fonts/vt323-latin-400.woff2"},function(t,e,o){t.exports=o.p+"fonts/vt323-latin-400.woff"}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
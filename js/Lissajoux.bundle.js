(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{19:function(t,e,i){(function(){"use strict";var s=this.THREE||i(15);if(!s)throw new Error("MeshLine requires three.js");function a(){this.positions=[],this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[],this.counters=[],this.geometry=new s.BufferGeometry,this.widthCallback=null}function r(t,e,i,s,a){var r;if(t=t.subarray||t.slice?t:t.buffer,i=i.subarray||i.slice?i:i.buffer,t=e?t.subarray?t.subarray(e,a&&e+a):t.slice(e,a&&e+a):t,i.set)i.set(t,s);else for(r=0;r<t.length;r++)i[r+s]=t[r];return i}function o(t){function e(t,e){return void 0===t?e:t}s.Material.call(this),t=t||{},this.lineWidth=e(t.lineWidth,1),this.map=e(t.map,null),this.useMap=e(t.useMap,0),this.alphaMap=e(t.alphaMap,null),this.useAlphaMap=e(t.useAlphaMap,0),this.color=e(t.color,new s.Color(16777215)),this.opacity=e(t.opacity,1),this.resolution=e(t.resolution,new s.Vector2(1,1)),this.sizeAttenuation=e(t.sizeAttenuation,1),this.near=e(t.near,1),this.far=e(t.far,1),this.dashArray=e(t.dashArray,0),this.dashOffset=e(t.dashOffset,0),this.dashRatio=e(t.dashRatio,.5),this.useDash=0!==this.dashArray?1:0,this.visibility=e(t.visibility,1),this.alphaTest=e(t.alphaTest,0),this.repeat=e(t.repeat,new s.Vector2(1,1));var i=new s.RawShaderMaterial({uniforms:{lineWidth:{type:"f",value:this.lineWidth},map:{type:"t",value:this.map},useMap:{type:"f",value:this.useMap},alphaMap:{type:"t",value:this.alphaMap},useAlphaMap:{type:"f",value:this.useAlphaMap},color:{type:"c",value:this.color},opacity:{type:"f",value:this.opacity},resolution:{type:"v2",value:this.resolution},sizeAttenuation:{type:"f",value:this.sizeAttenuation},near:{type:"f",value:this.near},far:{type:"f",value:this.far},dashArray:{type:"f",value:this.dashArray},dashOffset:{type:"f",value:this.dashOffset},dashRatio:{type:"f",value:this.dashRatio},useDash:{type:"f",value:this.useDash},visibility:{type:"f",value:this.visibility},alphaTest:{type:"f",value:this.alphaTest},repeat:{type:"v2",value:this.repeat}},vertexShader:["precision highp float;","","attribute vec3 position;","attribute vec3 previous;","attribute vec3 next;","attribute float side;","attribute float width;","attribute vec2 uv;","attribute float counters;","","uniform mat4 projectionMatrix;","uniform mat4 modelViewMatrix;","uniform vec2 resolution;","uniform float lineWidth;","uniform vec3 color;","uniform float opacity;","uniform float near;","uniform float far;","uniform float sizeAttenuation;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","vec2 fix( vec4 i, float aspect ) {","","    vec2 res = i.xy / i.w;","    res.x *= aspect;","\t vCounters = counters;","    return res;","","}","","void main() {","","    float aspect = resolution.x / resolution.y;","\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);","","    vColor = vec4( color, opacity );","    vUV = uv;","","    mat4 m = projectionMatrix * modelViewMatrix;","    vec4 finalPosition = m * vec4( position, 1.0 );","    vec4 prevPos = m * vec4( previous, 1.0 );","    vec4 nextPos = m * vec4( next, 1.0 );","","    vec2 currentP = fix( finalPosition, aspect );","    vec2 prevP = fix( prevPos, aspect );","    vec2 nextP = fix( nextPos, aspect );","","\t float pixelWidth = finalPosition.w * pixelWidthRatio;","    float w = 1.8 * pixelWidth * lineWidth * width;","","    if( sizeAttenuation == 1. ) {","        w = 1.8 * lineWidth * width;","    }","","    vec2 dir;","    if( nextP == currentP ) dir = normalize( currentP - prevP );","    else if( prevP == currentP ) dir = normalize( nextP - currentP );","    else {","        vec2 dir1 = normalize( currentP - prevP );","        vec2 dir2 = normalize( nextP - currentP );","        dir = normalize( dir1 + dir2 );","","        vec2 perp = vec2( -dir1.y, dir1.x );","        vec2 miter = vec2( -dir.y, dir.x );","        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );","","    }","","    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;","    vec2 normal = vec2( -dir.y, dir.x );","    normal.x /= aspect;","    normal *= .5 * w;","","    vec4 offset = vec4( normal * side, 0.0, 1.0 );","    finalPosition.xy += offset.xy;","","    gl_Position = finalPosition;","","}"].join("\r\n"),fragmentShader:["#extension GL_OES_standard_derivatives : enable","precision mediump float;","","uniform sampler2D map;","uniform sampler2D alphaMap;","uniform float useMap;","uniform float useAlphaMap;","uniform float useDash;","uniform float dashArray;","uniform float dashOffset;","uniform float dashRatio;","uniform float visibility;","uniform float alphaTest;","uniform vec2 repeat;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","void main() {","","    vec4 c = vColor;","    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );","    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;","    if( c.a < alphaTest ) discard;","    if( useDash == 1. ){","        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));","    }","    gl_FragColor = c;","    gl_FragColor.a *= step(vCounters, visibility);","}"].join("\r\n")});return delete t.lineWidth,delete t.map,delete t.useMap,delete t.alphaMap,delete t.useAlphaMap,delete t.color,delete t.opacity,delete t.resolution,delete t.sizeAttenuation,delete t.near,delete t.far,delete t.dashArray,delete t.dashOffset,delete t.dashRatio,delete t.visibility,delete t.alphaTest,delete t.repeat,i.type="MeshLineMaterial",i.setValues(t),i}a.prototype.setGeometry=function(t,e){if(this.widthCallback=e,this.positions=[],this.counters=[],t instanceof s.Geometry)for(var i=0;i<t.vertices.length;i++){var a=t.vertices[i];e=i/t.vertices.length;this.positions.push(a.x,a.y,a.z),this.positions.push(a.x,a.y,a.z),this.counters.push(e),this.counters.push(e)}if(s.BufferGeometry,t instanceof Float32Array||t instanceof Array)for(i=0;i<t.length;i+=3){e=i/t.length;this.positions.push(t[i],t[i+1],t[i+2]),this.positions.push(t[i],t[i+1],t[i+2]),this.counters.push(e),this.counters.push(e)}this.process()},a.prototype.compareV3=function(t,e){var i=6*t,s=6*e;return this.positions[i]===this.positions[s]&&this.positions[i+1]===this.positions[s+1]&&this.positions[i+2]===this.positions[s+2]},a.prototype.copyV3=function(t){var e=6*t;return[this.positions[e],this.positions[e+1],this.positions[e+2]]},a.prototype.process=function(){var t,e,i=this.positions.length/6;this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[];for(var a=0;a<i;a++)this.side.push(1),this.side.push(-1);for(a=0;a<i;a++)t=this.widthCallback?this.widthCallback(a/(i-1)):1,this.width.push(t),this.width.push(t);for(a=0;a<i;a++)this.uvs.push(a/(i-1),0),this.uvs.push(a/(i-1),1);e=this.compareV3(0,i-1)?this.copyV3(i-2):this.copyV3(0),this.previous.push(e[0],e[1],e[2]),this.previous.push(e[0],e[1],e[2]);for(a=0;a<i-1;a++)e=this.copyV3(a),this.previous.push(e[0],e[1],e[2]),this.previous.push(e[0],e[1],e[2]);for(a=1;a<i;a++)e=this.copyV3(a),this.next.push(e[0],e[1],e[2]),this.next.push(e[0],e[1],e[2]);e=this.compareV3(i-1,0)?this.copyV3(1):this.copyV3(i-1),this.next.push(e[0],e[1],e[2]),this.next.push(e[0],e[1],e[2]);for(a=0;a<i-1;a++){var r=2*a;this.indices_array.push(r,r+1,r+2),this.indices_array.push(r+2,r+1,r+3)}this.attributes?(this.attributes.position.copyArray(new Float32Array(this.positions)),this.attributes.position.needsUpdate=!0,this.attributes.previous.copyArray(new Float32Array(this.previous)),this.attributes.previous.needsUpdate=!0,this.attributes.next.copyArray(new Float32Array(this.next)),this.attributes.next.needsUpdate=!0,this.attributes.side.copyArray(new Float32Array(this.side)),this.attributes.side.needsUpdate=!0,this.attributes.width.copyArray(new Float32Array(this.width)),this.attributes.width.needsUpdate=!0,this.attributes.uv.copyArray(new Float32Array(this.uvs)),this.attributes.uv.needsUpdate=!0,this.attributes.index.copyArray(new Uint16Array(this.indices_array)),this.attributes.index.needsUpdate=!0):this.attributes={position:new s.BufferAttribute(new Float32Array(this.positions),3),previous:new s.BufferAttribute(new Float32Array(this.previous),3),next:new s.BufferAttribute(new Float32Array(this.next),3),side:new s.BufferAttribute(new Float32Array(this.side),1),width:new s.BufferAttribute(new Float32Array(this.width),1),uv:new s.BufferAttribute(new Float32Array(this.uvs),2),index:new s.BufferAttribute(new Uint16Array(this.indices_array),1),counters:new s.BufferAttribute(new Float32Array(this.counters),1)},this.geometry.addAttribute("position",this.attributes.position),this.geometry.addAttribute("previous",this.attributes.previous),this.geometry.addAttribute("next",this.attributes.next),this.geometry.addAttribute("side",this.attributes.side),this.geometry.addAttribute("width",this.attributes.width),this.geometry.addAttribute("uv",this.attributes.uv),this.geometry.addAttribute("counters",this.attributes.counters),this.geometry.setIndex(this.attributes.index)},a.prototype.advance=function(t){var e=this.attributes.position.array,i=this.attributes.previous.array,s=this.attributes.next.array,a=e.length;r(e,0,i,0,a),r(e,6,e,0,a-6),e[a-6]=t.x,e[a-5]=t.y,e[a-4]=t.z,e[a-3]=t.x,e[a-2]=t.y,e[a-1]=t.z,r(e,6,s,0,a-6),s[a-6]=t.x,s[a-5]=t.y,s[a-4]=t.z,s[a-3]=t.x,s[a-2]=t.y,s[a-1]=t.z,this.attributes.position.needsUpdate=!0,this.attributes.previous.needsUpdate=!0,this.attributes.next.needsUpdate=!0},o.prototype=Object.create(s.Material.prototype),o.prototype.constructor=o,o.prototype.copy=function(t){return s.Material.prototype.copy.call(this,t),this.lineWidth=t.lineWidth,this.map=t.map,this.useMap=t.useMap,this.alphaMap=t.alphaMap,this.useAlphaMap=t.useAlphaMap,this.color.copy(t.color),this.opacity=t.opacity,this.resolution.copy(t.resolution),this.sizeAttenuation=t.sizeAttenuation,this.near=t.near,this.far=t.far,this.dashArray.copy(t.dashArray),this.dashOffset.copy(t.dashOffset),this.dashRatio.copy(t.dashRatio),this.useDash=t.useDash,this.visibility=t.visibility,this.alphaTest=t.alphaTest,this.repeat.copy(t.repeat),this},t.exports&&(e=t.exports={MeshLine:a,MeshLineMaterial:o}),e.MeshLine=a,e.MeshLineMaterial=o}).call(this)},3:function(t,e,i){"use strict";i.r(e),i.d(e,"default",function(){return o});var s=i(15),a=i(19);function r(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var o=function(){function t(e){var i=e.scene,r=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new s.Color;o.setIntHSL(48,90,64),i.renderer.setClearColor(o);var n=i.camera.aspect;i.camera=new s.OrthographicCamera(10*n/-2,10*n/2,5,-5,1,150),i.camera.position.copy(new s.Vector3(0,0,10)),i.camera.lookAt(new s.Vector3(0,0,0)),this.root=new s.Group,this.lissaRatio=Math.random(),this.lissaCount=600;for(var h=new s.Geometry,u=0;u<this.lissaCount;u++){var p=new s.Vector3(5*Math.cos(u),5*Math.cos(.8*u),0);h.vertices.push(p)}this.line=new a.MeshLine,this.line.setGeometry(h);var l=new a.MeshLineMaterial({color:new s.Color("#7c6bd2"),sizeAttenuation:0,lineWidth:1e-4}),c=new s.Mesh(this.line.geometry,l);this.root.add(c),r&&r()}var e,i,o;return e=t,(i=[{key:"update",value:function(t){for(var e=.9*t,i=new s.Geometry,a=0;a<this.lissaCount;a++){var r=new s.Vector3(5*Math.cos(a+e),5*Math.cos((a+e)*this.lissaRatio),0);i.vertices.push(r)}this.line.setGeometry(i)}}])&&r(e.prototype,i),o&&r(e,o),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{31:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var n=r(28);r(32);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];r=s(this,(e=h(t)).call.apply(e,[this].concat(a)));var l=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){o(e,t,r[t])})}return e}({},c,a[0]),p=l.intensity,d=l.castShadow,f=l.bias,m=l.projectionSides,v=l.mapSize;r.intensity=p,r.projectionSides=m,r.mapSize=v,console.log("mapsize",r.mapSize);var b=new n.DirectionalLight("white",.65*r.intensity),g=new n.DirectionalLight("white",.55*r.intensity);return b.shadow.bias=f||0,g.shadow.bias=f||0,b.castShadow=d,g.castShadow=d,r.updateProjection(b,r.projectionSides),r.updateProjection(g,r.projectionSides),r.updateShadowMap(b,r.mapSize),r.updateShadowMap(g,r.mapSize),b.position.copy(new n.Vector3(9,3.5,0)),g.position.copy(new n.Vector3(-10,2,0)),r.add(b,g),r}var r,i,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,n["Group"]),r=t,(i=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(r.prototype,i),l&&a(r,l),t}()},32:function(e,t,r){"use strict";r.d(t,"a",function(){return h});var n=r(28);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=o(this,a(t).call(this));var r=new n.HemisphereLight(16777215,16777215,3);return r.color.setHSL(Math.NormalizeHue(325),.1,.94),r.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),r.position.set(0,2,0),e.add(r),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,n["Group"]),t}()},33:function(e,t,r){"use strict";r.d(t,"a",function(){return i});var n=r(28);var i=function e(t){var r=t.size,i=void 0===r?5:r,o=t.material,a=t.position,s=t.widthSegments,h=t.heightSegments,u=t.castShadow,c=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,p=1,d=1;this.color=new n.Color,this.color.setRGB(l,p,d),this.material=o||new n.MeshBasicMaterial({color:this.color});var f=this.material.length>1?n.SphereBufferGeometry:n.SphereGeometry;if(this.geometry=new f(i,s||7,h||9),this.material.length){this.geometry.clearGroups();for(var m=0;m<o.length;m++)this.geometry.addGroup(0,1/0,m)}this.mesh=new n.Mesh(this.geometry,this.material),this.mesh.castShadow=u,this.mesh.receiveShadow=c,a&&this.mesh.position.copy(a),this.root=this.mesh}},34:function(e,t,r){"use strict";function n(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,i,o){var a=this;this.onError=o||n;var s=new e.FileLoader(a.manager);s.setPath(this.path),s.load(t,function(e){r(a.parse(e))},i,o)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var n={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var n=r.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var n=this.vertices,i=this.object.geometry.vertices;i.push(n[e+0]),i.push(n[e+1]),i.push(n[e+2]),i.push(n[t+0]),i.push(n[t+1]),i.push(n[t+2]),i.push(n[r+0]),i.push(n[r+1]),i.push(n[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var n=this.normals,i=this.object.geometry.normals;i.push(n[e+0]),i.push(n[e+1]),i.push(n[e+2]),i.push(n[t+0]),i.push(n[t+1]),i.push(n[t+2]),i.push(n[r+0]),i.push(n[r+1]),i.push(n[r+2])},addUV:function(e,t,r){var n=this.uvs,i=this.object.geometry.uvs;i.push(n[e+0]),i.push(n[e+1]),i.push(n[t+0]),i.push(n[t+1]),i.push(n[r+0]),i.push(n[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,n,i,o,a,s,h,u,c,l){var p,d=this.vertices.length,f=this.parseVertexIndex(e,d),m=this.parseVertexIndex(t,d),v=this.parseVertexIndex(r,d);if(void 0===n?this.addVertex(f,m,v):(p=this.parseVertexIndex(n,d),this.addVertex(f,m,p),this.addVertex(m,v,p)),void 0!==i){var b=this.uvs.length;f=this.parseUVIndex(i,b),m=this.parseUVIndex(o,b),v=this.parseUVIndex(a,b),void 0===n?this.addUV(f,m,v):(p=this.parseUVIndex(s,b),this.addUV(f,m,p),this.addUV(m,v,p))}if(void 0!==h){var g=this.normals.length;f=this.parseNormalIndex(h,g),m=h===u?f:this.parseNormalIndex(u,g),v=h===c?f:this.parseNormalIndex(c,g),void 0===n?this.addNormal(f,m,v):(p=this.parseNormalIndex(l,g),this.addNormal(f,m,p),this.addNormal(m,v,p))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,n=this.uvs.length,i=0,o=e.length;i<o;i++)this.addVertexLine(this.parseVertexIndex(e[i],r));var a=0;for(o=t.length;a<o;a++)this.addUVLine(this.parseUVIndex(t[a],n))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var n=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var i=t.split("\n"),o="",a="",s="",h=[],u="function"==typeof"".trimLeft,c=0,l=i.length;c<l;c++)if(o=i[c],0!==(o=u?o.trimLeft():o.trim()).length&&"#"!==(a=o.charAt(0)))if("v"===a)" "===(s=o.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(o))?n.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===s&&null!==(h=this.regexp.normal_pattern.exec(o))?n.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===s&&null!==(h=this.regexp.uv_pattern.exec(o))?n.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+o+"'");else if("f"===a)null!==(h=this.regexp.face_vertex_uv_normal.exec(o))?n.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(o))?n.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(o))?n.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(o))?n.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+o+"'");else if("l"===a){var p=o.substring(1).trim().split(" "),d=[],f=[];if(-1===o.indexOf("/"))d=p;else for(var m=0,v=p.length;m<v;m++){var b=p[m].split("/");""!==b[0]&&d.push(b[0]),""!==b[1]&&f.push(b[1])}n.addLineGeometry(d,f)}else if(null!==(h=this.regexp.object_pattern.exec(o))){var g=(" "+h[0].substr(1).trim()).substr(1);n.startObject(g)}else if(this.regexp.material_use_pattern.test(o))n.object.startMaterial(o.substring(7).trim(),n.materialLibraries);else if(this.regexp.material_library_pattern.test(o))n.materialLibraries.push(o.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(o))){var y=h[1].trim().toLowerCase();n.object.smooth="1"===y||"on"===y,(z=n.object.currentMaterial())&&(z.smooth=n.object.smooth)}else{if("\0"===o)continue;this.onError("Unexpected line: '"+o+"'")}n.finalize();var w=new e.Group;w.materialLibraries=[].concat(n.materialLibraries);for(c=0,l=n.objects.length;c<l;c++){var x=n.objects[c],j=x.geometry,_=x.materials,S="Line"===j.type;if(0!==j.vertices.length){var O=new e.BufferGeometry;O.addAttribute("position",new e.BufferAttribute(new Float32Array(j.vertices),3)),j.normals.length>0?O.addAttribute("normal",new e.BufferAttribute(new Float32Array(j.normals),3)):O.computeVertexNormals(),j.uvs.length>0&&O.addAttribute("uv",new e.BufferAttribute(new Float32Array(j.uvs),2));for(var L,E=[],M=0,V=_.length;M<V;M++){var P=_[M],z=void 0;if(null!==this.materials&&(z=this.materials.create(P.name),S&&z&&!(z instanceof e.LineBasicMaterial))){var I=new e.LineBasicMaterial;I.copy(z),z=I}z||((z=S?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=P.name),z.shading=P.smooth?e.SmoothShading:e.FlatShading,E.push(z)}if(E.length>1){for(M=0,V=_.length;M<V;M++){P=_[M];O.addGroup(P.groupStart,P.groupCount,M)}var F=new e.MultiMaterial(E);L=S?new e.LineSegments(O,F):new e.Mesh(O,F)}else L=S?new e.LineSegments(O,E[0]):new e.Mesh(O,E[0]);L.name=x.name,w.add(L)}}return r&&console.timeEnd("OBJLoader"),w}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
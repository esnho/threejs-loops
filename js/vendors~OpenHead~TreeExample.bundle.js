(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{110:function(t,e,r){var a=r(104);a.MTLLoader=function(t){this.manager=void 0!==t?t:a.DefaultLoadingManager},a.MTLLoader.prototype={constructor:a.MTLLoader,load:function(t,e,r,s){var i=this,o=new a.FileLoader(this.manager);o.setPath(this.path),o.load(t,function(t){e(i.parse(t))},r,s)},setPath:function(t){return this.path=t,this},setTexturePath:function(t){return this.texturePath=t,this},setBaseUrl:function(t){return console.warn("THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead."),this.setTexturePath(t)},setCrossOrigin:function(t){return this.crossOrigin=t,this},setMaterialOptions:function(t){return this.materialOptions=t,this},parse:function(t){for(var e=t.split("\n"),r={},s=/\s+/,i={},o=0;o<e.length;o++){var n=e[o];if(0!==(n=n.trim()).length&&"#"!==n.charAt(0)){var h=n.indexOf(" "),l=h>=0?n.substring(0,h):n;l=l.toLowerCase();var u=h>=0?n.substring(h+1):"";if(u=u.trim(),"newmtl"===l)r={name:u},i[u]=r;else if(r)if("ka"===l||"kd"===l||"ks"===l){var c=u.split(s,3);r[l]=[parseFloat(c[0]),parseFloat(c[1]),parseFloat(c[2])]}else r[l]=u}}var p=new a.MTLLoader.MaterialCreator(this.texturePath||this.path,this.materialOptions);return p.setCrossOrigin(this.crossOrigin),p.setManager(this.manager),p.setMaterials(i),p}},a.MTLLoader.MaterialCreator=function(t,e){this.baseUrl=t||"",this.options=e,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:a.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:a.RepeatWrapping},a.MTLLoader.MaterialCreator.prototype={constructor:a.MTLLoader.MaterialCreator,crossOrigin:"Anonymous",setCrossOrigin:function(t){this.crossOrigin=t},setManager:function(t){this.manager=t},setMaterials:function(t){this.materialsInfo=this.convert(t),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(t){if(!this.options)return t;var e={};for(var r in t){var a=t[r],s={};for(var i in e[r]=s,a){var o=!0,n=a[i],h=i.toLowerCase();switch(h){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(n=[n[0]/255,n[1]/255,n[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===n[0]&&0===n[1]&&0===n[2]&&(o=!1)}o&&(s[h]=n)}}return e},preload:function(){for(var t in this.materialsInfo)this.create(t)},getIndex:function(t){return this.nameLookup[t]},getAsArray:function(){var t=0;for(var e in this.materialsInfo)this.materialsArray[t]=this.create(e),this.nameLookup[e]=t,t++;return this.materialsArray},create:function(t){return void 0===this.materials[t]&&this.createMaterial_(t),this.materials[t]},createMaterial_:function(t){var e=this,r=this.materialsInfo[t],s={name:t,side:this.side};function i(t,r){if(!s[t]){var a,i,o=e.getTextureParams(r,s),n=e.loadTexture((a=e.baseUrl,"string"!=typeof(i=o.url)||""===i?"":/^https?:\/\//i.test(i)?i:a+i));n.repeat.copy(o.scale),n.offset.copy(o.offset),n.wrapS=e.wrap,n.wrapT=e.wrap,s[t]=n}}for(var o in r){var n,h=r[o];if(""!==h)switch(o.toLowerCase()){case"kd":s.color=(new a.Color).fromArray(h);break;case"ks":s.specular=(new a.Color).fromArray(h);break;case"map_kd":i("map",h);break;case"map_ks":i("specularMap",h);break;case"norm":i("normalMap",h);break;case"map_bump":case"bump":i("bumpMap",h);break;case"ns":s.shininess=parseFloat(h);break;case"d":(n=parseFloat(h))<1&&(s.opacity=n,s.transparent=!0);break;case"tr":n=parseFloat(h),this.options&&this.options.invertTrProperty&&(n=1-n),n>0&&(s.opacity=1-n,s.transparent=!0)}}return this.materials[t]=new a.MeshPhongMaterial(s),this.materials[t]},getTextureParams:function(t,e){var r,s={scale:new a.Vector2(1,1),offset:new a.Vector2(0,0)},i=t.split(/\s+/);return(r=i.indexOf("-bm"))>=0&&(e.bumpScale=parseFloat(i[r+1]),i.splice(r,2)),(r=i.indexOf("-s"))>=0&&(s.scale.set(parseFloat(i[r+1]),parseFloat(i[r+2])),i.splice(r,4)),(r=i.indexOf("-o"))>=0&&(s.offset.set(parseFloat(i[r+1]),parseFloat(i[r+2])),i.splice(r,4)),s.url=i.join(" ").trim(),s},loadTexture:function(t,e,r,s,i){var o,n=a.Loader.Handlers.get(t),h=void 0!==this.manager?this.manager:a.DefaultLoadingManager;return null===n&&(n=new a.TextureLoader(h)),n.setCrossOrigin&&n.setCrossOrigin(this.crossOrigin),o=n.load(t,r,s,i),void 0!==e&&(o.mapping=e),o}},a.OBJLoader=function(){var t=/^[og]\s*(.+)?/,e=/^mtllib /,r=/^usemtl /;function s(){var t={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var a={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(a),a},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},r&&r.name&&"function"==typeof r.clone){var a=r.clone(0);a.inherited=!0,this.object.materials.push(a)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseNormalIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseUVIndex:function(t,e){var r=parseInt(t,10);return 2*(r>=0?r-1:r+e/2)},addVertex:function(t,e,r){var a=this.vertices,s=this.object.geometry.vertices;s.push(a[t+0],a[t+1],a[t+2]),s.push(a[e+0],a[e+1],a[e+2]),s.push(a[r+0],a[r+1],a[r+2])},addVertexPoint:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addVertexLine:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addNormal:function(t,e,r){var a=this.normals,s=this.object.geometry.normals;s.push(a[t+0],a[t+1],a[t+2]),s.push(a[e+0],a[e+1],a[e+2]),s.push(a[r+0],a[r+1],a[r+2])},addColor:function(t,e,r){var a=this.colors,s=this.object.geometry.colors;s.push(a[t+0],a[t+1],a[t+2]),s.push(a[e+0],a[e+1],a[e+2]),s.push(a[r+0],a[r+1],a[r+2])},addUV:function(t,e,r){var a=this.uvs,s=this.object.geometry.uvs;s.push(a[t+0],a[t+1]),s.push(a[e+0],a[e+1]),s.push(a[r+0],a[r+1])},addUVLine:function(t){var e=this.uvs;this.object.geometry.uvs.push(e[t+0],e[t+1])},addFace:function(t,e,r,a,s,i,o,n,h){var l=this.vertices.length,u=this.parseVertexIndex(t,l),c=this.parseVertexIndex(e,l),p=this.parseVertexIndex(r,l);if(this.addVertex(u,c,p),void 0!==a&&""!==a){var f=this.uvs.length;u=this.parseUVIndex(a,f),c=this.parseUVIndex(s,f),p=this.parseUVIndex(i,f),this.addUV(u,c,p)}if(void 0!==o&&""!==o){var m=this.normals.length;u=this.parseNormalIndex(o,m),c=o===n?u:this.parseNormalIndex(n,m),p=o===h?u:this.parseNormalIndex(h,m),this.addNormal(u,c,p)}this.colors.length>0&&this.addColor(u,c,p)},addPointGeometry:function(t){this.object.geometry.type="Points";for(var e=this.vertices.length,r=0,a=t.length;r<a;r++)this.addVertexPoint(this.parseVertexIndex(t[r],e))},addLineGeometry:function(t,e){this.object.geometry.type="Line";for(var r=this.vertices.length,a=this.uvs.length,s=0,i=t.length;s<i;s++)this.addVertexLine(this.parseVertexIndex(t[s],r));var o=0;for(i=e.length;o<i;o++)this.addUVLine(this.parseUVIndex(e[o],a))}};return t.startObject("",!1),t}function i(t){this.manager=void 0!==t?t:a.DefaultLoadingManager,this.materials=null}return i.prototype={constructor:i,load:function(t,e,r,s){var i=this,o=new a.FileLoader(i.manager);o.setPath(this.path),o.load(t,function(t){e(i.parse(t))},r,s)},setPath:function(t){return this.path=t,this},setMaterials:function(t){return this.materials=t,this},parse:function(i){console.time("OBJLoader");var o=new s;-1!==i.indexOf("\r\n")&&(i=i.replace(/\r\n/g,"\n")),-1!==i.indexOf("\\\n")&&(i=i.replace(/\\\n/g,""));for(var n=i.split("\n"),h="",l="",u=[],c="function"==typeof"".trimLeft,p=0,f=n.length;p<f;p++)if(h=n[p],0!==(h=c?h.trimLeft():h.trim()).length&&"#"!==(l=h.charAt(0)))if("v"===l){var m=h.split(/\s+/);switch(m[0]){case"v":o.vertices.push(parseFloat(m[1]),parseFloat(m[2]),parseFloat(m[3])),8===m.length&&o.colors.push(parseFloat(m[4]),parseFloat(m[5]),parseFloat(m[6]));break;case"vn":o.normals.push(parseFloat(m[1]),parseFloat(m[2]),parseFloat(m[3]));break;case"vt":o.uvs.push(parseFloat(m[1]),parseFloat(m[2]))}}else if("f"===l){for(var d=h.substr(1).trim().split(/\s+/),v=[],g=0,b=d.length;g<b;g++){var L=d[g];if(L.length>0){var x=L.split("/");v.push(x)}}var w=v[0];for(g=1,b=v.length-1;g<b;g++){var y=v[g],M=v[g+1];o.addFace(w[0],y[0],M[0],w[1],y[1],M[1],w[2],y[2],M[2])}}else if("l"===l){var j=h.substring(1).trim().split(" "),F=[],O=[];if(-1===h.indexOf("/"))F=j;else for(var k=0,C=j.length;k<C;k++){var P=j[k].split("/");""!==P[0]&&F.push(P[0]),""!==P[1]&&O.push(P[1])}o.addLineGeometry(F,O)}else if("p"===l){var V=h.substr(1).trim().split(" ");o.addPointGeometry(V)}else if(null!==(u=t.exec(h))){var I=(" "+u[0].substr(1).trim()).substr(1);o.startObject(I)}else if(r.test(h))o.object.startMaterial(h.substring(7).trim(),o.materialLibraries);else if(e.test(h))o.materialLibraries.push(h.substring(7).trim());else{if("s"!==l){if("\0"===h)continue;throw new Error('THREE.OBJLoader: Unexpected line: "'+h+'"')}if((u=h.split(" ")).length>1){var A=u[1].trim().toLowerCase();o.object.smooth="0"!==A&&"off"!==A}else o.object.smooth=!0;(W=o.object.currentMaterial())&&(W.smooth=o.object.smooth)}o.finalize();var T=new a.Group;T.materialLibraries=[].concat(o.materialLibraries);for(p=0,f=o.objects.length;p<f;p++){var B=o.objects[p],U=B.geometry,z=B.materials,E="Line"===U.type,_="Points"===U.type,S=!1;if(0!==U.vertices.length){var G=new a.BufferGeometry;G.addAttribute("position",new a.Float32BufferAttribute(U.vertices,3)),U.normals.length>0?G.addAttribute("normal",new a.Float32BufferAttribute(U.normals,3)):G.computeVertexNormals(),U.colors.length>0&&(S=!0,G.addAttribute("color",new a.Float32BufferAttribute(U.colors,3))),U.uvs.length>0&&G.addAttribute("uv",new a.Float32BufferAttribute(U.uvs,2));for(var J,N=[],D=0,R=z.length;D<R;D++){var H=z[D],W=void 0;if(null!==this.materials)if(W=this.materials.create(H.name),!E||!W||W instanceof a.LineBasicMaterial){if(_&&W&&!(W instanceof a.PointsMaterial)){var Z=new a.PointsMaterial({size:10,sizeAttenuation:!1});q.copy(W),W=Z}}else{var q=new a.LineBasicMaterial;q.copy(W),q.lights=!1,W=q}W||((W=E?new a.LineBasicMaterial:_?new a.PointsMaterial({size:1,sizeAttenuation:!1}):new a.MeshPhongMaterial).name=H.name),W.flatShading=!H.smooth,W.vertexColors=S?a.VertexColors:a.NoColors,N.push(W)}if(N.length>1){for(D=0,R=z.length;D<R;D++){H=z[D];G.addGroup(H.groupStart,H.groupCount,D)}J=E?new a.LineSegments(G,N):_?new a.Points(G,N):new a.Mesh(G,N)}else J=E?new a.LineSegments(G,N[0]):_?new a.Points(G,N[0]):new a.Mesh(G,N[0]);J.name=B.name,T.add(J)}}return console.timeEnd("OBJLoader"),T}},i}(),e.MTLLoader=a.MTLLoader,e.OBJLoader=a.OBJLoader}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{13:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(12);var r=function t(e){var n=e.size,r=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new o.d,this.color.setRGB(s,c,u),this.material=i||new o.i({color:this.color}),this.geometry=new o.b(r,r,r),this.mesh=new o.h(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},14:function(t,e,n){"use strict";n.d(e,"a",function(){return c});var o=n(12);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var n=new o.g(16777215,16777215,1.5);return n.color.setHSL(u(325),.9,.94),n.groundColor.setHSL(u(325),.9,.64),n.position.set(0,2,0),t.add(n),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["f"]),e}();function u(t){return t/360}},3:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return s});var o=n(12),r=n(14),i=n(13);function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);this.scene=e,e.camera.position.copy(new o.p(0,0,10)),e.camera.lookAt(new o.p(0,0,0)),e.camera.far=150,this.scene.camera.updateProjectionMatrix(),this.root=new o.f;var n=new r.a;this.root.add(n);var a=new o.j({color:16777215,metalness:.4,roughness:.2});this.cubes=[];var s=Math.PI/250*.5;this.cubesParent=new o.f;for(var c=-250;c<250;c++){var u=35*Math.cos(s*c),f=35*Math.sin(s*c),h=new i.a({size:1,material:a,position:new o.p(0,f,-60)});h.root.scale.copy(new o.p(2*u,.75*s*u,1)),this.cubesParent.add(h.root),this.cubes.push(h)}this.root.add(this.cubesParent)}var e,n,s;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var r=this.cubesParent.children[n],i=r.rotation;i.setFromVector3(new o.p(0,Math.sin(n*Math.PI*.25+e)*Math.PI*.02*Math.sin(.2*t),0)),r.rotation.copy(i)}}}])&&a(e.prototype,n),s&&a(e,s),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
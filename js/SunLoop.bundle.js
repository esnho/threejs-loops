(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{16:function(t,e,o){"use strict";o.d(e,"a",function(){return r});var n=o(15);var r=function t(e){var o=e.size,r=void 0===o?5:o,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new n.Color,this.color.setRGB(s,c,u),this.material=i||new n.MeshBasicMaterial({color:this.color}),this.geometry=new n.BoxGeometry(r,r,r),this.mesh=new n.Mesh(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},17:function(t,e,o){"use strict";o.d(e,"a",function(){return c});var n=o(15);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var o=new n.HemisphereLight(16777215,16777215,1.5);return o.color.setHSL(u(325),.9,.94),o.groundColor.setHSL(u(325),.9,.64),o.position.set(0,2,0),t.add(o),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,n["Group"]),e}();function u(t){return t/360}},5:function(t,e,o){"use strict";o.r(e),o.d(e,"default",function(){return s});var n=o(15),r=o(17),i=o(16);function a(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function t(e){var o=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);this.scene=o,o.camera.position.copy(new n.Vector3(0,0,10)),o.camera.lookAt(new n.Vector3(0,0,0)),o.camera.far=150,this.scene.camera.updateProjectionMatrix(),this.root=new n.Group;var s=new r.a;this.root.add(s);var c=new n.MeshStandardMaterial({color:16777215,metalness:.4,roughness:.2});this.cubes=[];var u=Math.PI/15*.5;this.cubesParent=new n.Group;for(var f=-15;f<15;f++){var h=35*Math.cos(u*f),l=35*Math.sin(u*f),p=new i.a({size:1,material:c,position:new n.Vector3(0,l,-60)});p.root.scale.copy(new n.Vector3(2*h,.75*u*h,1)),this.cubesParent.add(p.root),this.cubes.push(p)}this.root.add(this.cubesParent),a&&a()}var e,o,s;return e=t,(o=[{key:"update",value:function(t){for(var e=3*t,o=0;o<this.cubesParent.children.length;o++){var r=this.cubesParent.children[o],i=r.rotation;i.setFromVector3(new n.Vector3(0,Math.sin(o*Math.PI*.15+e)*Math.PI*.07*(Math.sin(o*Math.PI*.14+e)*Math.PI*.07),0)),r.rotation.copy(i)}}}])&&a(e.prototype,o),s&&a(e,s),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{15:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(14);var r=function t(e){var n=e.size,r=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new o.d,this.color.setRGB(s,c,u),this.material=i||new o.l({color:this.color}),this.geometry=new o.b(r,r,r),this.mesh=new o.k(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},16:function(t,e,n){"use strict";n.d(e,"a",function(){return c});var o=n(14);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var n=new o.i(16777215,16777215,1.5);return n.color.setHSL(u(325),.9,.94),n.groundColor.setHSL(u(325),.9,.64),n.position.set(0,2,0),t.add(n),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["h"]),e}();function u(t){return t/360}},4:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return s});var o=n(14),r=n(16),i=n(15);function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=function(){function t(e){var n=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);this.scene=n,n.camera.position.copy(new o.t(0,0,10)),n.camera.lookAt(new o.t(0,0,0)),n.camera.far=150,this.scene.camera.updateProjectionMatrix(),this.root=new o.h;var s=new r.a;this.root.add(s);var c=new o.m({color:16777215,metalness:.4,roughness:.2});this.cubes=[];var u=Math.PI/15*.5;this.cubesParent=new o.h;for(var f=-15;f<15;f++){var h=35*Math.cos(u*f),l=35*Math.sin(u*f),p=new i.a({size:1,material:c,position:new o.t(0,l,-60)});p.root.scale.copy(new o.t(2*h,.75*u*h,1)),this.cubesParent.add(p.root),this.cubes.push(p)}this.root.add(this.cubesParent),a&&a()}var e,n,s;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var r=this.cubesParent.children[n],i=r.rotation;i.setFromVector3(new o.t(0,Math.sin(n*Math.PI*.15+e)*Math.PI*.07*(Math.sin(n*Math.PI*.14+e)*Math.PI*.07),0)),r.rotation.copy(i)}}}])&&a(e.prototype,n),s&&a(e,s),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
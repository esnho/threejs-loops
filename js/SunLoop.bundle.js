(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{29:function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(28);var o=function t(e){var n=e.size,o=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var c=1,s=1,u=1;this.color=new r.Color,this.color.setRGB(c,s,u),this.material=i||new r.MeshBasicMaterial({color:this.color}),this.geometry=new r.BoxGeometry(o,o,o),this.mesh=new r.Mesh(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},30:function(t,e,n){"use strict";n.d(e,"a",function(){return f});var r=n(28);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var u={intensity:1},f=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,s=new Array(o),f=0;f<o;f++)s[f]=arguments[f];(n=a(this,(t=c(e)).call.apply(t,[this].concat(s)))).params=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){i(t,e,n[e])})}return t}({},u,s[0]);var h=new r.HemisphereLight(16777215,16777215,1.5*n.params.intensity);return h.color.setHSL(l(325),.9,.94),h.groundColor.setHSL(l(325),.9,.64),h.position.set(0,2,0),n.add(h),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,r["Group"]),e}();function l(t){return t/360}},7:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return c});var r=n(28),o=n(30),i=n(29);function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(e){var n=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);this.scene=n,n.camera.position.copy(new r.Vector3(0,0,10)),n.camera.lookAt(new r.Vector3(0,0,0)),n.camera.far=150,this.scene.camera.updateProjectionMatrix(),this.root=new r.Group;var c=new o.a;this.root.add(c);var s=new r.MeshStandardMaterial({color:16777215,metalness:.4,roughness:.2});this.cubes=[];var u=Math.PI/15*.5;this.cubesParent=new r.Group;for(var f=-15;f<15;f++){var l=35*Math.cos(u*f),h=35*Math.sin(u*f),p=new i.a({size:1,material:s,position:new r.Vector3(0,h,-60)});p.root.scale.copy(new r.Vector3(2*l,.75*u*l,1)),this.cubesParent.add(p.root),this.cubes.push(p)}this.root.add(this.cubesParent),a&&a()}var e,n,c;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var o=this.cubesParent.children[n],i=o.rotation;i.setFromVector3(new r.Vector3(0,Math.sin(n*Math.PI*.15+e)*Math.PI*.07*(Math.sin(n*Math.PI*.14+e)*Math.PI*.07),0)),o.rotation.copy(i)}}}])&&a(e.prototype,n),c&&a(e,c),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
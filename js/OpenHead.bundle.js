(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{19:function(e,t,r){"use strict";r.d(t,"a",function(){return h});var o=r(16);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=n(this,a(t).call(this));var r=new o.HemisphereLight(16777215,16777215,3);return r.color.setHSL(Math.NormalizeHue(325),.1,.94),r.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),r.position.set(0,2,0),e.add(r),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,o["Group"]),t}()},20:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var o=r(16);r(19);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];r=s(this,(e=h(t)).call.apply(e,[this].concat(a)));var l=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),o.forEach(function(t){n(e,t,r[t])})}return e}({},u,a[0]),p=l.intensity,d=l.castShadow,f=l.bias,m=l.projectionSides,v=l.mapSize;r.intensity=p,r.projectionSides=m,r.mapSize=v;var g=new o.DirectionalLight("white",.65*r.intensity),y=new o.DirectionalLight("white",.55*r.intensity);return g.shadow.bias=f||0,y.shadow.bias=f||0,g.castShadow=d,y.castShadow=d,r.updateProjection(g,r.projectionSides),r.updateProjection(y,r.projectionSides),r.updateShadowMap(g,r.mapSize),r.updateShadowMap(g,r.mapSize),g.position.copy(new o.Vector3(9,3.5,0)),y.position.copy(new o.Vector3(-10,2,0)),r.add(g,y),r}var r,i,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o["Group"]),r=t,(i=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(r.prototype,i),l&&a(r,l),t}()},21:function(e,t,r){"use strict";r.d(t,"a",function(){return i});var o=r(16);var i=function e(t){var r=t.size,i=void 0===r?5:r,n=t.material,a=t.position,s=t.widthSegments,h=t.heightSegments,c=t.castShadow,u=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,p=1,d=1;this.color=new o.Color,this.color.setRGB(l,p,d),this.material=n||new o.MeshBasicMaterial({color:this.color});var f=this.material.length>1?o.SphereBufferGeometry:o.SphereGeometry;if(this.geometry=new f(i,s||7,h||9),this.material.length){this.geometry.clearGroups();for(var m=0;m<n.length;m++)this.geometry.addGroup(0,1/0,m)}this.mesh=new o.Mesh(this.geometry,this.material),this.mesh.castShadow=c,this.mesh.receiveShadow=u,a&&this.mesh.position.copy(a),this.root=this.mesh}},26:function(e,t,r){e.exports=r.p+"159ef41f07288c02101f7226a66c492f.obj"},27:function(e,t,r){"use strict";function o(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,i,n){var a=this;this.onError=n||o;var s=new e.FileLoader(a.manager);s.setPath(this.path),s.load(t,function(e){r(a.parse(e))},i,n)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var o={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(o),o},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var o=r.clone(0);o.inherited=!0,this.object.materials.push(o)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var o=this.vertices,i=this.object.geometry.vertices;i.push(o[e+0]),i.push(o[e+1]),i.push(o[e+2]),i.push(o[t+0]),i.push(o[t+1]),i.push(o[t+2]),i.push(o[r+0]),i.push(o[r+1]),i.push(o[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var o=this.normals,i=this.object.geometry.normals;i.push(o[e+0]),i.push(o[e+1]),i.push(o[e+2]),i.push(o[t+0]),i.push(o[t+1]),i.push(o[t+2]),i.push(o[r+0]),i.push(o[r+1]),i.push(o[r+2])},addUV:function(e,t,r){var o=this.uvs,i=this.object.geometry.uvs;i.push(o[e+0]),i.push(o[e+1]),i.push(o[t+0]),i.push(o[t+1]),i.push(o[r+0]),i.push(o[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,o,i,n,a,s,h,c,u,l){var p,d=this.vertices.length,f=this.parseVertexIndex(e,d),m=this.parseVertexIndex(t,d),v=this.parseVertexIndex(r,d);if(void 0===o?this.addVertex(f,m,v):(p=this.parseVertexIndex(o,d),this.addVertex(f,m,p),this.addVertex(m,v,p)),void 0!==i){var g=this.uvs.length;f=this.parseUVIndex(i,g),m=this.parseUVIndex(n,g),v=this.parseUVIndex(a,g),void 0===o?this.addUV(f,m,v):(p=this.parseUVIndex(s,g),this.addUV(f,m,p),this.addUV(m,v,p))}if(void 0!==h){var y=this.normals.length;f=this.parseNormalIndex(h,y),m=h===c?f:this.parseNormalIndex(c,y),v=h===u?f:this.parseNormalIndex(u,y),void 0===o?this.addNormal(f,m,v):(p=this.parseNormalIndex(l,y),this.addNormal(f,m,p),this.addNormal(m,v,p))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,o=this.uvs.length,i=0,n=e.length;i<n;i++)this.addVertexLine(this.parseVertexIndex(e[i],r));var a=0;for(n=t.length;a<n;a++)this.addUVLine(this.parseUVIndex(t[a],o))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var o=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var i=t.split("\n"),n="",a="",s="",h=[],c="function"==typeof"".trimLeft,u=0,l=i.length;u<l;u++)if(n=i[u],0!==(n=c?n.trimLeft():n.trim()).length&&"#"!==(a=n.charAt(0)))if("v"===a)" "===(s=n.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(n))?o.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===s&&null!==(h=this.regexp.normal_pattern.exec(n))?o.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===s&&null!==(h=this.regexp.uv_pattern.exec(n))?o.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+n+"'");else if("f"===a)null!==(h=this.regexp.face_vertex_uv_normal.exec(n))?o.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(n))?o.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(n))?o.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(n))?o.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+n+"'");else if("l"===a){var p=n.substring(1).trim().split(" "),d=[],f=[];if(-1===n.indexOf("/"))d=p;else for(var m=0,v=p.length;m<v;m++){var g=p[m].split("/");""!==g[0]&&d.push(g[0]),""!==g[1]&&f.push(g[1])}o.addLineGeometry(d,f)}else if(null!==(h=this.regexp.object_pattern.exec(n))){var y=(" "+h[0].substr(1).trim()).substr(1);o.startObject(y)}else if(this.regexp.material_use_pattern.test(n))o.object.startMaterial(n.substring(7).trim(),o.materialLibraries);else if(this.regexp.material_library_pattern.test(n))o.materialLibraries.push(n.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(n))){var b=h[1].trim().toLowerCase();o.object.smooth="1"===b||"on"===b,(B=o.object.currentMaterial())&&(B.smooth=o.object.smooth)}else{if("\0"===n)continue;this.onError("Unexpected line: '"+n+"'")}o.finalize();var w=new e.Group;w.materialLibraries=[].concat(o.materialLibraries);for(u=0,l=o.objects.length;u<l;u++){var S=o.objects[u],x=S.geometry,j=S.materials,_="Line"===x.type;if(0!==x.vertices.length){var O=new e.BufferGeometry;O.addAttribute("position",new e.BufferAttribute(new Float32Array(x.vertices),3)),x.normals.length>0?O.addAttribute("normal",new e.BufferAttribute(new Float32Array(x.normals),3)):O.computeVertexNormals(),x.uvs.length>0&&O.addAttribute("uv",new e.BufferAttribute(new Float32Array(x.uvs),2));for(var M,L=[],V=0,E=j.length;V<E;V++){var P=j[V],B=void 0;if(null!==this.materials&&(B=this.materials.create(P.name),_&&B&&!(B instanceof e.LineBasicMaterial))){var C=new e.LineBasicMaterial;C.copy(B),B=C}B||((B=_?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=P.name),B.shading=P.smooth?e.SmoothShading:e.FlatShading,L.push(B)}if(L.length>1){for(V=0,E=j.length;V<E;V++){P=j[V];O.addGroup(P.groupStart,P.groupCount,V)}var z=new e.MultiMaterial(L);M=_?new e.LineSegments(O,z):new e.Mesh(O,z)}else M=_?new e.LineSegments(O,L[0]):new e.Mesh(O,L[0]);M.name=S.name,w.add(M)}}return r&&console.timeEnd("OBJLoader"),w}}}},5:function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return u});var o=r(16),i=r(26),n=r.n(i),a=r(20),s=r(21),h=r(27);function c(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}h(o);var u=function(){function e(t){var r=t.scene,i=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=r,this.setupCamera(),r.renderer.shadowMap.enabled=!0,r.renderer.shadowMap.type=o.PCFSoftShadowMap,this.root=new o.Group,this.setupLights(),this.createSpheres(),this.loadHead(),i&&i()}var t,r,i;return t=e,(r=[{key:"setupLights",value:function(){var e=new a.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){var e=this.scene.camera.aspect;this.scene.camera=new o.OrthographicCamera(10*e/-2,10*e/2,5,-5,1,150),this.scene.camera.position.copy(new o.Vector3(0,3.5,10)),this.scene.camera.lookAt(new o.Vector3(0,0,0))}},{key:"createSpheres",value:function(){var e=new o.MeshBasicMaterial({color:16777215,wireframe:!0}),t=[new o.MeshStandardMaterial({flatShading:!0,roughness:0}),e],r=[new o.MeshStandardMaterial({emissive:6161169,flatShading:!0}),e];this.spheres=new o.Group,this.sphereA=new s.a({size:8,widthSegments:6,heightSegments:6,material:t,castShadow:!0,receiveShadow:!0}),this.sphereA.root.position.copy(new o.Vector3(2.5,0,3)),this.sphereB=new s.a({size:7,widthSegments:7,heightSegments:6,material:t,castShadow:!0,receiveShadow:!0}),this.sphereB.root.position.copy(new o.Vector3(2,.5,-7)),this.sphereC=new s.a({size:5,widthSegments:5,heightSegments:4,material:r,castShadow:!0,receiveShadow:!0}),this.sphereC.root.position.copy(new o.Vector3(-6.5,.5,-1)),this.spheres.add(this.sphereA.root),this.spheres.add(this.sphereB.root),this.spheres.add(this.sphereC.root),this.spheres.position.copy(new o.Vector3(0,8,0))}},{key:"loadHead",value:function(){var e=new o.OBJLoader;this.onHeadReady=this.onHeadReady.bind(this),e.load(n.a,this.onHeadReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){console.log(e.loaded/e.total*100+"% loaded")}},{key:"onHeadReady",value:function(e){e.scale.copy(new o.Vector3(.2,.2,.2)),e.traverse(function(e){e.receiveShadow=!0,e.castShadow=!0,e.name&&e.name.indexOf("occhio")>=0&&(e.material.color.setRGB(0,0,0),e.material.specular.setRGB(.1,.1,.1),e.material.roughness=0)}),this.root.add(e),this.head=e,this.head.rotateY(-.25*Math.PI),this.head.add(this.spheres)}},{key:"update",value:function(e,t){if(this.head){var r=.1*e;this.head.rotateY(Math.sin(r)*t*.1),this.sphereA.root.rotateY(.3*t),this.sphereA.root.rotateX(.6*t),this.sphereB.root.rotateY(-.4*t),this.sphereB.root.rotateX(-.6*t),this.sphereC.root.rotateY(-.4*t),this.sphereC.root.rotateX(.6*t),this.sphereC.root.rotateZ(.9*t)}}}])&&c(t.prototype,r),i&&c(t,i),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
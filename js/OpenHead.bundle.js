(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{17:function(e,t,r){"use strict";r.d(t,"a",function(){return o});var i=r(16);var o=function e(t){var r=t.size,o=void 0===r?5:r,a=t.material,n=t.position;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var s=1,h=1,c=1;this.color=new i.Color,this.color.setRGB(s,h,c),this.material=a||new i.MeshBasicMaterial({color:this.color}),this.geometry=new i.BoxGeometry(o,o,o),this.mesh=new i.Mesh(this.geometry,this.material),n&&this.mesh.position.copy(n),this.root=this.mesh}},19:function(e,t,r){"use strict";r.d(t,"a",function(){return h});var i=r(16);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function n(e){return(n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=a(this,n(t).call(this));var r=new i.HemisphereLight(16777215,16777215,3);return r.color.setHSL(Math.NormalizeHue(325),.1,.94),r.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),r.position.set(0,2,0),e.add(r),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,i["Group"]),t}()},20:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var i=r(16);r(19);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,n=new Array(o),c=0;c<o;c++)n[c]=arguments[c];r=s(this,(e=h(t)).call.apply(e,[this].concat(n)));var l=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),i.forEach(function(t){a(e,t,r[t])})}return e}({},u,n[0]),d=l.intensity,p=l.castShadow,f=l.bias,m=l.projectionSides,v=l.mapSize;r.intensity=d,r.projectionSides=m,r.mapSize=v;var g=new i.DirectionalLight("white",.65*r.intensity),y=new i.DirectionalLight("white",.55*r.intensity);return g.shadow.bias=f||0,y.shadow.bias=f||0,g.castShadow=p,y.castShadow=p,r.updateProjection(g,r.projectionSides),r.updateProjection(y,r.projectionSides),r.updateShadowMap(g,r.mapSize),r.updateShadowMap(g,r.mapSize),g.position.copy(new i.Vector3(9,3.5,0)),y.position.copy(new i.Vector3(-10,2,0)),r.add(g,y),r}var r,o,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,i["Group"]),r=t,(o=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&n(r.prototype,o),l&&n(r,l),t}()},21:function(e,t,r){"use strict";r.d(t,"a",function(){return o});var i=r(16);var o=function e(t){var r=t.size,o=void 0===r?5:r,a=t.material,n=t.position,s=t.widthSegments,h=t.heightSegments,c=t.castShadow,u=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,d=1,p=1;this.color=new i.Color,this.color.setRGB(l,d,p),this.material=a||new i.MeshBasicMaterial({color:this.color});var f=this.material.length>1?i.SphereBufferGeometry:i.SphereGeometry;if(this.geometry=new f(o,s||7,h||9),this.material.length){this.geometry.clearGroups();for(var m=0;m<a.length;m++)this.geometry.addGroup(0,1/0,m)}this.mesh=new i.Mesh(this.geometry,this.material),this.mesh.castShadow=c,this.mesh.receiveShadow=u,n&&this.mesh.position.copy(n),this.root=this.mesh}},26:function(e,t,r){e.exports=r.p+"obj/male.obj"},27:function(e,t,r){"use strict";function i(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,o,a){var n=this;this.onError=a||i;var s=new e.FileLoader(n.manager);s.setPath(this.path),s.load(t,function(e){r(n.parse(e))},o,a)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var i={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var i=r.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var i=this.vertices,o=this.object.geometry.vertices;o.push(i[e+0]),o.push(i[e+1]),o.push(i[e+2]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[t+2]),o.push(i[r+0]),o.push(i[r+1]),o.push(i[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var i=this.normals,o=this.object.geometry.normals;o.push(i[e+0]),o.push(i[e+1]),o.push(i[e+2]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[t+2]),o.push(i[r+0]),o.push(i[r+1]),o.push(i[r+2])},addUV:function(e,t,r){var i=this.uvs,o=this.object.geometry.uvs;o.push(i[e+0]),o.push(i[e+1]),o.push(i[t+0]),o.push(i[t+1]),o.push(i[r+0]),o.push(i[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,i,o,a,n,s,h,c,u,l){var d,p=this.vertices.length,f=this.parseVertexIndex(e,p),m=this.parseVertexIndex(t,p),v=this.parseVertexIndex(r,p);if(void 0===i?this.addVertex(f,m,v):(d=this.parseVertexIndex(i,p),this.addVertex(f,m,d),this.addVertex(m,v,d)),void 0!==o){var g=this.uvs.length;f=this.parseUVIndex(o,g),m=this.parseUVIndex(a,g),v=this.parseUVIndex(n,g),void 0===i?this.addUV(f,m,v):(d=this.parseUVIndex(s,g),this.addUV(f,m,d),this.addUV(m,v,d))}if(void 0!==h){var y=this.normals.length;f=this.parseNormalIndex(h,y),m=h===c?f:this.parseNormalIndex(c,y),v=h===u?f:this.parseNormalIndex(u,y),void 0===i?this.addNormal(f,m,v):(d=this.parseNormalIndex(l,y),this.addNormal(f,m,d),this.addNormal(m,v,d))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,i=this.uvs.length,o=0,a=e.length;o<a;o++)this.addVertexLine(this.parseVertexIndex(e[o],r));var n=0;for(a=t.length;n<a;n++)this.addUVLine(this.parseUVIndex(t[n],i))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var i=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var o=t.split("\n"),a="",n="",s="",h=[],c="function"==typeof"".trimLeft,u=0,l=o.length;u<l;u++)if(a=o[u],0!==(a=c?a.trimLeft():a.trim()).length&&"#"!==(n=a.charAt(0)))if("v"===n)" "===(s=a.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(a))?i.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===s&&null!==(h=this.regexp.normal_pattern.exec(a))?i.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===s&&null!==(h=this.regexp.uv_pattern.exec(a))?i.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+a+"'");else if("f"===n)null!==(h=this.regexp.face_vertex_uv_normal.exec(a))?i.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(a))?i.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(a))?i.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(a))?i.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+a+"'");else if("l"===n){var d=a.substring(1).trim().split(" "),p=[],f=[];if(-1===a.indexOf("/"))p=d;else for(var m=0,v=d.length;m<v;m++){var g=d[m].split("/");""!==g[0]&&p.push(g[0]),""!==g[1]&&f.push(g[1])}i.addLineGeometry(p,f)}else if(null!==(h=this.regexp.object_pattern.exec(a))){var y=(" "+h[0].substr(1).trim()).substr(1);i.startObject(y)}else if(this.regexp.material_use_pattern.test(a))i.object.startMaterial(a.substring(7).trim(),i.materialLibraries);else if(this.regexp.material_library_pattern.test(a))i.materialLibraries.push(a.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(a))){var b=h[1].trim().toLowerCase();i.object.smooth="1"===b||"on"===b,(B=i.object.currentMaterial())&&(B.smooth=i.object.smooth)}else{if("\0"===a)continue;this.onError("Unexpected line: '"+a+"'")}i.finalize();var w=new e.Group;w.materialLibraries=[].concat(i.materialLibraries);for(u=0,l=i.objects.length;u<l;u++){var S=i.objects[u],x=S.geometry,j=S.materials,_="Line"===x.type;if(0!==x.vertices.length){var M=new e.BufferGeometry;M.addAttribute("position",new e.BufferAttribute(new Float32Array(x.vertices),3)),x.normals.length>0?M.addAttribute("normal",new e.BufferAttribute(new Float32Array(x.normals),3)):M.computeVertexNormals(),x.uvs.length>0&&M.addAttribute("uv",new e.BufferAttribute(new Float32Array(x.uvs),2));for(var O,L=[],V=0,C=j.length;V<C;V++){var E=j[V],B=void 0;if(null!==this.materials&&(B=this.materials.create(E.name),_&&B&&!(B instanceof e.LineBasicMaterial))){var P=new e.LineBasicMaterial;P.copy(B),B=P}B||((B=_?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=E.name),B.shading=E.smooth?e.SmoothShading:e.FlatShading,L.push(B)}if(L.length>1){for(V=0,C=j.length;V<C;V++){E=j[V];M.addGroup(E.groupStart,E.groupCount,V)}var z=new e.MultiMaterial(L);O=_?new e.LineSegments(M,z):new e.Mesh(M,z)}else O=_?new e.LineSegments(M,L[0]):new e.Mesh(M,L[0]);O.name=S.name,w.add(O)}}return r&&console.timeEnd("OBJLoader"),w}}}},5:function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return l});var i=r(16),o=r(26),a=r.n(o),n=r(20),s=r(21),h=r(17),c=r(27);function u(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}c(i);var l=function(){function e(t){var r=t.scene,o=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=r,this.setupCamera(),r.renderer.shadowMap.enabled=!0,r.renderer.shadowMap.type=i.PCFSoftShadowMap,this.root=new i.Group,this.wireMat=new i.MeshBasicMaterial({color:16777215,wireframe:!0});var a=new i.MeshStandardMaterial({emissive:6161169,flatShading:!0});this.loadingCube=new h.a({size:6,material:a}),this.root.add(this.loadingCube.root),this.loading(.5),this.setupLights(),this.createSpheres(),this.loadHead(),o&&o()}var t,r,o;return t=e,(r=[{key:"loading",value:function(e){this.loadingCube.root.scale.copy(new i.Vector3(1,e,1)),this.loadingCube.root.position.copy(new i.Vector3(0,-.5*this.loadingCube.root.geometry.parameters.height*(1-e),0));var t=new i.Quaternion;t.setFromAxisAngle(new i.Vector3(0,1,0),-2*Math.PI*e),this.loadingCube.root.quaternion.copy(t)}},{key:"setupLights",value:function(){var e=new n.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"setupCamera",value:function(){var e=this.scene.camera.aspect;this.scene.camera=new i.OrthographicCamera(10*e/-2,10*e/2,5,-5,1,150),this.scene.camera.position.copy(new i.Vector3(0,3.5,10)),this.scene.camera.lookAt(new i.Vector3(0,0,0))}},{key:"createSpheres",value:function(){var e=[new i.MeshStandardMaterial({flatShading:!0,roughness:0}),this.wireMat],t=[new i.MeshStandardMaterial({emissive:6161169,flatShading:!0}),this.wireMat];this.spheres=new i.Group,this.sphereA=new s.a({size:8,widthSegments:6,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereA.root.position.copy(new i.Vector3(2.5,0,3)),this.sphereB=new s.a({size:7,widthSegments:7,heightSegments:6,material:e,castShadow:!0,receiveShadow:!0}),this.sphereB.root.position.copy(new i.Vector3(2,.5,-7)),this.sphereC=new s.a({size:5,widthSegments:5,heightSegments:4,material:t,castShadow:!0,receiveShadow:!0}),this.sphereC.root.position.copy(new i.Vector3(-6.5,.5,-1)),this.spheres.add(this.sphereA.root),this.spheres.add(this.sphereB.root),this.spheres.add(this.sphereC.root),this.spheres.position.copy(new i.Vector3(0,8,0))}},{key:"loadHead",value:function(){var e=new i.OBJLoader;this.onHeadReady=this.onHeadReady.bind(this),this.onHeadLoading=this.onHeadLoading.bind(this),e.load(a.a,this.onHeadReady,this.onHeadLoading,function(e){console.log("An error happened",e)})}},{key:"onHeadLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded"),this.loading(Math.sin(t))}},{key:"onHeadReady",value:function(e){this.root.remove(this.loadingCube.root),this.loadingCube=null,e.scale.copy(new i.Vector3(.2,.2,.2)),e.traverse(function(e){e.receiveShadow=!0,e.castShadow=!0,e.name&&e.name.indexOf("occhio")>=0&&(e.material.color.setRGB(0,0,0),e.material.specular.setRGB(.1,.1,.1),e.material.roughness=0)}),this.root.add(e),this.head=e,this.head.rotateY(-.25*Math.PI),this.head.add(this.spheres)}},{key:"update",value:function(e,t){if(this.head){var r=.1*e;this.head.rotateY(Math.sin(r)*t*.1),this.sphereA.root.rotateY(.3*t),this.sphereA.root.rotateX(.6*t),this.sphereB.root.rotateY(-.4*t),this.sphereB.root.rotateX(-.6*t),this.sphereC.root.rotateY(-.4*t),this.sphereC.root.rotateX(.6*t),this.sphereC.root.rotateZ(.9*t)}}}])&&u(t.prototype,r),o&&u(t,o),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvT2JqZWN0cy9CYXNpY0N1YmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL0xpZ2h0cy9XaGl0ZUhlbWkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL0xpZ2h0cy9Ud29EaXJlY3Rpb25hbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL09iamVjdHMvQmFzaWNTcGhlcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL29iai9tYWxlLm9iaiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtb2JqLWxvYWRlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9Mb29wcy9PcGVuSGVhZC5qcyJdLCJuYW1lcyI6WyJCYXNpY0N1YmUiLCJfcmVmIiwiX3JlZiRzaXplIiwic2l6ZSIsIm1hdGVyaWFsIiwicG9zaXRpb24iLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwic2VlZCIsIk1hdGgiLCJyYW5kb20iLCJjb2xvciIsIkNvbG9yIiwic2V0UkdCIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJnZW9tZXRyeSIsIkJveEdlb21ldHJ5IiwibWVzaCIsIk1lc2giLCJjb3B5Iiwicm9vdCIsIldoaXRlSGVtaSIsIl90aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJjYWxsIiwiaGVtaUxpZ2h0IiwiSGVtaXNwaGVyZUxpZ2h0Iiwic2V0SFNMIiwiTm9ybWFsaXplSHVlIiwiZ3JvdW5kQ29sb3IiLCJzZXQiLCJhZGQiLCJHcm91cCIsImRlZmF1bHRQYXJhbXMiLCJpbnRlbnNpdHkiLCJjYXN0U2hhZG93IiwiYmlhcyIsInByb2plY3Rpb25TaWRlcyIsInVuZGVmaW5lZCIsIm1hcFNpemUiLCJUd29EaXJlY3Rpb25hbHMiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImNvbmNhdCIsIl9kZWZhdWx0UGFyYW1zJGFyZ3MkIiwiX29iamVjdFNwcmVhZCIsImRpcmVjdGlvbmFsTGlnaHQiLCJEaXJlY3Rpb25hbExpZ2h0IiwiZGlyZWN0aW9uYWxMaWdodDIiLCJzaGFkb3ciLCJ1cGRhdGVQcm9qZWN0aW9uIiwidXBkYXRlU2hhZG93TWFwIiwiVmVjdG9yMyIsImxpZ2h0IiwiY2FtZXJhIiwibGVmdCIsInJpZ2h0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsIndpZHRoIiwiaGVpZ2h0IiwiQmFzaWNTcGhlcmUiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJyZWNlaXZlU2hhZG93IiwiU3BoZXJlIiwiU3BoZXJlQnVmZmVyR2VvbWV0cnkiLCJTcGhlcmVHZW9tZXRyeSIsImNsZWFyR3JvdXBzIiwiaSIsImFkZEdyb3VwIiwiSW5maW5pdHkiLCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInAiLCJkZWZhdWx0T25FcnJvciIsImVyciIsIkVycm9yIiwiVEhSRUUiLCJPQkpMb2FkZXIiLCJtYW5hZ2VyIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwibWF0ZXJpYWxzIiwicmVnZXhwIiwidmVydGV4X3BhdHRlcm4iLCJub3JtYWxfcGF0dGVybiIsInV2X3BhdHRlcm4iLCJmYWNlX3ZlcnRleCIsImZhY2VfdmVydGV4X3V2IiwiZmFjZV92ZXJ0ZXhfdXZfbm9ybWFsIiwiZmFjZV92ZXJ0ZXhfbm9ybWFsIiwib2JqZWN0X3BhdHRlcm4iLCJzbW9vdGhpbmdfcGF0dGVybiIsIm1hdGVyaWFsX2xpYnJhcnlfcGF0dGVybiIsIm1hdGVyaWFsX3VzZV9wYXR0ZXJuIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJsb2FkIiwidXJsIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJzY29wZSIsImxvYWRlciIsIkZpbGVMb2FkZXIiLCJzZXRQYXRoIiwicGF0aCIsInRleHQiLCJwYXJzZSIsInZhbHVlIiwic2V0TWF0ZXJpYWxzIiwiX2NyZWF0ZVBhcnNlclN0YXRlIiwic3RhdGUiLCJvYmplY3RzIiwib2JqZWN0IiwidmVydGljZXMiLCJub3JtYWxzIiwidXZzIiwibWF0ZXJpYWxMaWJyYXJpZXMiLCJzdGFydE9iamVjdCIsIm5hbWUiLCJmcm9tRGVjbGFyYXRpb24iLCJwcmV2aW91c01hdGVyaWFsIiwiY3VycmVudE1hdGVyaWFsIiwiX2ZpbmFsaXplIiwic21vb3RoIiwic3RhcnRNYXRlcmlhbCIsImxpYnJhcmllcyIsInByZXZpb3VzIiwiaW5oZXJpdGVkIiwiZ3JvdXBDb3VudCIsInNwbGljZSIsImluZGV4IiwibXRsbGliIiwiaXNBcnJheSIsImdyb3VwU3RhcnQiLCJncm91cEVuZCIsImNsb25lIiwiY2xvbmVkIiwiYmluZCIsInB1c2giLCJlbmQiLCJsYXN0TXVsdGlNYXRlcmlhbCIsIm1pIiwiZGVjbGFyZWQiLCJmaW5hbGl6ZSIsInBhcnNlVmVydGV4SW5kZXgiLCJsZW4iLCJwYXJzZUludCIsInBhcnNlTm9ybWFsSW5kZXgiLCJwYXJzZVVWSW5kZXgiLCJhZGRWZXJ0ZXgiLCJhIiwiYiIsImMiLCJzcmMiLCJkc3QiLCJhZGRWZXJ0ZXhMaW5lIiwiYWRkTm9ybWFsIiwiYWRkVVYiLCJhZGRVVkxpbmUiLCJhZGRGYWNlIiwiZCIsInVhIiwidWIiLCJ1YyIsInVkIiwibmEiLCJuYiIsIm5jIiwibmQiLCJpZCIsInZMZW4iLCJpYSIsImliIiwiaWMiLCJ1dkxlbiIsIm5MZW4iLCJhZGRMaW5lR2VvbWV0cnkiLCJ0eXBlIiwidmkiLCJsIiwidXZpIiwiZGVidWciLCJjb25zb2xlIiwidGltZSIsImluZGV4T2YiLCJyZXBsYWNlIiwibGluZXMiLCJzcGxpdCIsImxpbmUiLCJsaW5lRmlyc3RDaGFyIiwibGluZVNlY29uZENoYXIiLCJyZXN1bHQiLCJ0cmltTGVmdCIsInRyaW0iLCJjaGFyQXQiLCJleGVjIiwicGFyc2VGbG9hdCIsImxpbmVQYXJ0cyIsInN1YnN0cmluZyIsImxpbmVWZXJ0aWNlcyIsImxpbmVVVnMiLCJsaSIsImxsZW4iLCJwYXJ0cyIsInN1YnN0ciIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImNvbnRhaW5lciIsImlzTGluZSIsImJ1ZmZlcmdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJhZGRBdHRyaWJ1dGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDMyQXJyYXkiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsImNyZWF0ZWRNYXRlcmlhbHMiLCJtaUxlbiIsInNvdXJjZU1hdGVyaWFsIiwiY3JlYXRlIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJtYXRlcmlhbExpbmUiLCJNZXNoUGhvbmdNYXRlcmlhbCIsInNoYWRpbmciLCJTbW9vdGhTaGFkaW5nIiwiRmxhdFNoYWRpbmciLCJtdWx0aU1hdGVyaWFsIiwiTXVsdGlNYXRlcmlhbCIsIkxpbmVTZWdtZW50cyIsInRpbWVFbmQiLCJMaXNzYWpvdXgiLCJzY2VuZSIsInNldHVwQ2FtZXJhIiwicmVuZGVyZXIiLCJzaGFkb3dNYXAiLCJlbmFibGVkIiwid2lyZU1hdCIsIndpcmVmcmFtZSIsImxvYWRpbmdDdWJlTWF0IiwiZW1pc3NpdmUiLCJmbGF0U2hhZGluZyIsImxvYWRpbmdDdWJlIiwibG9hZGluZyIsInNldHVwTGlnaHRzIiwiY3JlYXRlU3BoZXJlcyIsImxvYWRIZWFkIiwicGVyY2VudGFnZSIsInNjYWxlIiwicGFyYW1ldGVycyIsInF1YXRlcm5pb24iLCJzZXRGcm9tQXhpc0FuZ2xlIiwiUEkiLCJsaWdodHMiLCJMaWdodHMiLCJyb3RhdGVZIiwiYXNwZWN0IiwiZnJ1c3R1bVNpemUiLCJsb29rQXQiLCJzcGhlcmVNYXQiLCJyb3VnaG5lc3MiLCJzcGhlcmVNYXQyIiwic3BoZXJlcyIsInNwaGVyZUEiLCJzcGhlcmVCIiwic3BoZXJlQyIsIm9uSGVhZFJlYWR5Iiwib25IZWFkTG9hZGluZyIsImhlYWQiLCJlcnJvciIsImxvZyIsInhociIsImxvYWRlZCIsInRvdGFsIiwic2luIiwicmVtb3ZlIiwidHJhdmVyc2UiLCJvYmoiLCJzcGVjdWxhciIsInRp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UCxLQUFLNlEsU0FBUyxHQUFNRixHQUVqQ3hSLEtBQUt5USxRQUFRNVAsS0FBS2tQLFNBQVMsR0FBTXlCLEdBQ2pDeFIsS0FBS3lRLFFBQVE1UCxLQUFLNlEsUUFBUSxHQUFNRixHQUNoQ3hSLEtBQUt5USxRQUFRNVAsS0FBSzhRLFFBQVEsR0FBTUgiLCJmaWxlIjoiLi9qcy9PcGVuSGVhZC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb2xvcixcbiAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gIEJveEdlb21ldHJ5LFxuICBNZXNoXG59IGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzaWNDdWJlIHtcbiAgY29uc3RydWN0b3Ioe3NpemUgPSA1LCBtYXRlcmlhbCwgcG9zaXRpb259KSB7XG4gICAgdGhpcy5zZWVkID0gTWF0aC5yYW5kb20oKTtcbiAgICBjb25zdCBjb2xvciA9IHtyOjEgLGc6MSwgYjoxfTtcbiAgICB0aGlzLmNvbG9yID0gbmV3IENvbG9yKCk7XG4gICAgdGhpcy5jb2xvci5zZXRSR0IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG5cbiAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgfHwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yXG4gICAgfSk7XG5cbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KHNpemUsIHNpemUsIHNpemUpO1xuXG4gICAgdGhpcy5tZXNoID0gbmV3IE1lc2goXG4gICAgICB0aGlzLmdlb21ldHJ5LFxuICAgICAgdGhpcy5tYXRlcmlhbFxuICAgICk7XG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzLm1lc2g7XG4gIH1cbn1cbiIsImltcG9ydCB7XG5cdEdyb3VwLFxuXHRIZW1pc3BoZXJlTGlnaHRcbn0gZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaGl0ZUhlbWkgZXh0ZW5kcyBHcm91cCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zdCBoZW1pTGlnaHQgPSBuZXcgSGVtaXNwaGVyZUxpZ2h0KCAweGZmZmZmZiwgMHhmZmZmZmYsIDMuMCApO1xuXHRcdGhlbWlMaWdodC5jb2xvci5zZXRIU0woXG5cdFx0XHRNYXRoLk5vcm1hbGl6ZUh1ZSgzMjUpLCBcblx0XHRcdDAuMSxcblx0XHRcdDAuOTRcblx0XHQpO1xuXHRcdGhlbWlMaWdodC5ncm91bmRDb2xvci5zZXRIU0woXG5cdFx0XHRNYXRoLk5vcm1hbGl6ZUh1ZSgzMjUpLCBcblx0XHRcdDAuMSwgXG5cdFx0XHQwLjY0XG5cdFx0KTtcblx0XHRoZW1pTGlnaHQucG9zaXRpb24uc2V0KCAwLCAyLCAwICk7XG5cdFx0dGhpcy5hZGQoIGhlbWlMaWdodCApO1xuXHR9XG59XG4iLCJpbXBvcnQge1xuICAgIEdyb3VwLFxuICAgIERpcmVjdGlvbmFsTGlnaHQsXG4gICAgVmVjdG9yM1xuICB9IGZyb20gJ3RocmVlJztcbmltcG9ydCBXaGl0ZUhlbWkgZnJvbSAnLi9XaGl0ZUhlbWkuanMnO1xuXG5jb25zdCBkZWZhdWx0UGFyYW1zID0ge1xuICAgIGludGVuc2l0eTogMSxcbiAgICBjYXN0U2hhZG93OiBmYWxzZSxcbiAgICBiaWFzOiAwLFxuICAgIHByb2plY3Rpb25TaWRlczogdW5kZWZpbmVkLFxuICAgIG1hcFNpemU6IDUxMixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHdvRGlyZWN0aW9uYWxzIGV4dGVuZHMgR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG5cdFx0Y29uc3Qge1xuICAgICAgICAgICAgaW50ZW5zaXR5LFxuICAgICAgICAgICAgY2FzdFNoYWRvdyxcbiAgICAgICAgICAgIGJpYXMsXG4gICAgICAgICAgICBwcm9qZWN0aW9uU2lkZXMsXG4gICAgICAgICAgICBtYXBTaXplXG4gICAgICAgIH0gPSB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0UGFyYW1zLFxuICAgICAgICAgICAgLi4uYXJnc1swXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmludGVuc2l0eSA9IGludGVuc2l0eTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uU2lkZXMgPSBwcm9qZWN0aW9uU2lkZXM7XG4gICAgICAgIHRoaXMubWFwU2l6ZSA9IG1hcFNpemU7XG4gICAgICAgIFxuICAgICAgICAvKiBjb25zdCB3aGl0ZUVtaSA9IG5ldyBXaGl0ZUhlbWkoKTtcbiAgICAgICAgdGhpcy5hZGQod2hpdGVFbWkpOyAqL1xuXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCgnd2hpdGUnLCAwLjY1ICogdGhpcy5pbnRlbnNpdHkpO1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25hbExpZ2h0MiA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCd3aGl0ZScsIDAuNTUgKiB0aGlzLmludGVuc2l0eSk7XG4gICAgICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmJpYXMgPSBiaWFzIHx8IDA7XG4gICAgICAgIGRpcmVjdGlvbmFsTGlnaHQyLnNoYWRvdy5iaWFzID0gYmlhcyB8fCAwO1xuICAgICAgICBcbiAgICAgICAgZGlyZWN0aW9uYWxMaWdodC5jYXN0U2hhZG93ID0gY2FzdFNoYWRvdztcbiAgICAgICAgZGlyZWN0aW9uYWxMaWdodDIuY2FzdFNoYWRvdyA9IGNhc3RTaGFkb3c7XG5cbiAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uKGRpcmVjdGlvbmFsTGlnaHQsIHRoaXMucHJvamVjdGlvblNpZGVzKTtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uKGRpcmVjdGlvbmFsTGlnaHQyLCB0aGlzLnByb2plY3Rpb25TaWRlcyk7XG4gICAgICAgIHRoaXMudXBkYXRlU2hhZG93TWFwKGRpcmVjdGlvbmFsTGlnaHQsIHRoaXMubWFwU2l6ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlU2hhZG93TWFwKGRpcmVjdGlvbmFsTGlnaHQsIHRoaXMubWFwU2l6ZSk7XG5cbiAgICAgICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5jb3B5KFxuICAgICAgICAgICAgbmV3IFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgOSxcbiAgICAgICAgICAgICAgICAzLjUsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIGRpcmVjdGlvbmFsTGlnaHQyLnBvc2l0aW9uLmNvcHkoXG4gICAgICAgICAgICBuZXcgVmVjdG9yMyhcbiAgICAgICAgICAgICAgICAtMTAsXG4gICAgICAgICAgICAgICAgMixcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5hZGQoZGlyZWN0aW9uYWxMaWdodCwgZGlyZWN0aW9uYWxMaWdodDIpO1xuICAgIH1cblxuICAgIHVwZGF0ZVByb2plY3Rpb24obGlnaHQsIHByb2plY3Rpb25TaWRlcykge1xuICAgICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtcHJvamVjdGlvblNpZGVzO1xuICAgICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gcHJvamVjdGlvblNpZGVzO1xuICAgICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTaGFkb3dNYXAobGlnaHQsIG1hcFNpemUpIHtcbiAgICAgICAgbGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSBtYXBTaXplO1xuICAgICAgICBsaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSBtYXBTaXplO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICBDb2xvcixcbiAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LFxuICBTcGhlcmVHZW9tZXRyeSxcbiAgTWVzaFxufSBmcm9tICd0aHJlZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2ljU3BoZXJlIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHNpemUgPSA1LFxuICAgIG1hdGVyaWFsLFxuICAgIHBvc2l0aW9uLFxuICAgIHdpZHRoU2VnbWVudHMsXG4gICAgaGVpZ2h0U2VnbWVudHMsXG4gICAgY2FzdFNoYWRvdyxcbiAgICByZWNlaXZlU2hhZG93XG4gIH0pIHtcbiAgICB0aGlzLnNlZWQgPSBNYXRoLnJhbmRvbSgpO1xuICAgIGNvbnN0IGNvbG9yID0ge3I6MSAsZzoxLCBiOjF9O1xuICAgIHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoKTtcbiAgICB0aGlzLmNvbG9yLnNldFJHQihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcblxuICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCB8fCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IHRoaXMuY29sb3JcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBTcGhlcmUgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aCA+IDEgPyBTcGhlcmVCdWZmZXJHZW9tZXRyeSA6IFNwaGVyZUdlb21ldHJ5O1xuXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBTcGhlcmUoXG4gICAgICBzaXplLCBcbiAgICAgIHdpZHRoU2VnbWVudHMgfHwgNywgXG4gICAgICBoZWlnaHRTZWdtZW50cyB8fCA5KTtcbiAgICBcbiAgICBpZiAodGhpcy5tYXRlcmlhbC5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZ2VvbWV0cnkuY2xlYXJHcm91cHMoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5hZGRHcm91cCggMCwgSW5maW5pdHksIGkgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaChcbiAgICAgIHRoaXMuZ2VvbWV0cnksXG4gICAgICB0aGlzLm1hdGVyaWFsXG4gICAgKTtcblxuICAgIHRoaXMubWVzaC5jYXN0U2hhZG93ID0gY2FzdFNoYWRvdztcbiAgICB0aGlzLm1lc2gucmVjZWl2ZVNoYWRvdyA9IHJlY2VpdmVTaGFkb3c7XG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzLm1lc2g7XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm9iai9tYWxlLm9ialwiOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IoZXJyKSB7XG4gIHRocm93IG5ldyBFcnJvcihlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUSFJFRSkge1xuXG4gIC8qKlxuICAgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICAgKi9cblxuICBUSFJFRS5PQkpMb2FkZXIgPSBmdW5jdGlvbiAobWFuYWdlcikge1xuXG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlciAhPT0gdW5kZWZpbmVkID8gbWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuICAgIHRoaXMubWF0ZXJpYWxzID0gbnVsbDtcblxuICAgIHRoaXMucmVnZXhwID0ge1xuICAgICAgLy8gdiBmbG9hdCBmbG9hdCBmbG9hdFxuICAgICAgdmVydGV4X3BhdHRlcm46IC9edlxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAvLyB2biBmbG9hdCBmbG9hdCBmbG9hdFxuICAgICAgbm9ybWFsX3BhdHRlcm46IC9edm5cXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKVxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKykvLFxuICAgICAgLy8gdnQgZmxvYXQgZmxvYXRcbiAgICAgIHV2X3BhdHRlcm46IC9ednRcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAvLyBmIHZlcnRleCB2ZXJ0ZXggdmVydGV4XG4gICAgICBmYWNlX3ZlcnRleDogL15mXFxzKygtP1xcZCspXFxzKygtP1xcZCspXFxzKygtP1xcZCspKD86XFxzKygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvdXYgdmVydGV4L3V2IHZlcnRleC91dlxuICAgICAgZmFjZV92ZXJ0ZXhfdXY6IC9eZlxccysoLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcLygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbFxuICAgICAgZmFjZV92ZXJ0ZXhfdXZfbm9ybWFsOiAvXmZcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbFxuICAgICAgZmFjZV92ZXJ0ZXhfbm9ybWFsOiAvXmZcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspXFxzKygtP1xcZCspXFwvXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKSk/LyxcbiAgICAgIC8vIG8gb2JqZWN0X25hbWUgfCBnIGdyb3VwX25hbWVcbiAgICAgIG9iamVjdF9wYXR0ZXJuOiAvXltvZ11cXHMqKC4rKT8vLFxuICAgICAgLy8gcyBib29sZWFuXG4gICAgICBzbW9vdGhpbmdfcGF0dGVybjogL15zXFxzKyhcXGQrfG9ufG9mZikvLFxuICAgICAgLy8gbXRsbGliIGZpbGVfcmVmZXJlbmNlXG4gICAgICBtYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm46IC9ebXRsbGliIC8sXG4gICAgICAvLyB1c2VtdGwgbWF0ZXJpYWxfbmFtZVxuICAgICAgbWF0ZXJpYWxfdXNlX3BhdHRlcm46IC9edXNlbXRsIC9cbiAgICB9O1xuICB9O1xuXG4gIFRIUkVFLk9CSkxvYWRlci5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvcjogVEhSRUUuT0JKTG9hZGVyLFxuXG4gICAgbG9hZDogZnVuY3Rpb24gbG9hZCh1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcikge1xuXG4gICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgdGhpcy5vbkVycm9yID0gb25FcnJvciB8fCBkZWZhdWx0T25FcnJvcjtcblxuICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKHNjb3BlLm1hbmFnZXIpO1xuICAgICAgbG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcbiAgICAgIGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKHRleHQpIHtcblxuICAgICAgICBvbkxvYWQoc2NvcGUucGFyc2UodGV4dCkpO1xuICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvcik7XG4gICAgfSxcblxuICAgIHNldFBhdGg6IGZ1bmN0aW9uIHNldFBhdGgodmFsdWUpIHtcblxuICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgfSxcblxuICAgIHNldE1hdGVyaWFsczogZnVuY3Rpb24gc2V0TWF0ZXJpYWxzKG1hdGVyaWFscykge1xuXG4gICAgICB0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcbiAgICB9LFxuXG4gICAgX2NyZWF0ZVBhcnNlclN0YXRlOiBmdW5jdGlvbiBfY3JlYXRlUGFyc2VyU3RhdGUoKSB7XG5cbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgb2JqZWN0czogW10sXG4gICAgICAgIG9iamVjdDoge30sXG5cbiAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICBub3JtYWxzOiBbXSxcbiAgICAgICAgdXZzOiBbXSxcblxuICAgICAgICBtYXRlcmlhbExpYnJhcmllczogW10sXG5cbiAgICAgICAgc3RhcnRPYmplY3Q6IGZ1bmN0aW9uIHN0YXJ0T2JqZWN0KG5hbWUsIGZyb21EZWNsYXJhdGlvbikge1xuXG4gICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgb2JqZWN0IChpbml0aWFsIGZyb20gcmVzZXQpIGlzIG5vdCBmcm9tIGEgZy9vIGRlY2xhcmF0aW9uIGluIHRoZSBwYXJzZWRcbiAgICAgICAgICAvLyBmaWxlLiBXZSBuZWVkIHRvIHVzZSBpdCBmb3IgdGhlIGZpcnN0IHBhcnNlZCBnL28gdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LmZyb21EZWNsYXJhdGlvbiA9IGZyb21EZWNsYXJhdGlvbiAhPT0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByZXZpb3VzTWF0ZXJpYWwgPSB0aGlzLm9iamVjdCAmJiB0eXBlb2YgdGhpcy5vYmplY3QuY3VycmVudE1hdGVyaWFsID09PSAnZnVuY3Rpb24nID8gdGhpcy5vYmplY3QuY3VycmVudE1hdGVyaWFsKCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5fZmluYWxpemUodHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vYmplY3QgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgZnJvbURlY2xhcmF0aW9uOiBmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlLFxuXG4gICAgICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgICAgICB2ZXJ0aWNlczogW10sXG4gICAgICAgICAgICAgIG5vcm1hbHM6IFtdLFxuICAgICAgICAgICAgICB1dnM6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0ZXJpYWxzOiBbXSxcbiAgICAgICAgICAgIHNtb290aDogdHJ1ZSxcblxuICAgICAgICAgICAgc3RhcnRNYXRlcmlhbDogZnVuY3Rpb24gc3RhcnRNYXRlcmlhbChuYW1lLCBsaWJyYXJpZXMpIHtcblxuICAgICAgICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLl9maW5hbGl6ZShmYWxzZSk7XG5cbiAgICAgICAgICAgICAgLy8gTmV3IHVzZW10bCBkZWNsYXJhdGlvbiBvdmVyd3JpdGVzIGFuIGluaGVyaXRlZCBtYXRlcmlhbCwgZXhjZXB0IGlmIGZhY2VzIHdlcmUgZGVjbGFyZWRcbiAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIG1hdGVyaWFsLCB0aGVuIGl0IG11c3QgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG4gICAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiAocHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCkpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnNwbGljZShwcmV2aW91cy5pbmRleCwgMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgIG10bGxpYjogQXJyYXkuaXNBcnJheShsaWJyYXJpZXMpICYmIGxpYnJhcmllcy5sZW5ndGggPiAwID8gbGlicmFyaWVzW2xpYnJhcmllcy5sZW5ndGggLSAxXSA6ICcnLFxuICAgICAgICAgICAgICAgIHNtb290aDogcHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLnNtb290aCA6IHRoaXMuc21vb3RoLFxuICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQ6IHByZXZpb3VzICE9PSB1bmRlZmluZWQgPyBwcmV2aW91cy5ncm91cEVuZCA6IDAsXG4gICAgICAgICAgICAgICAgZ3JvdXBFbmQ6IC0xLFxuICAgICAgICAgICAgICAgIGdyb3VwQ291bnQ6IC0xLFxuICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gaW5kZXggOiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG10bGxpYjogdGhpcy5tdGxsaWIsXG4gICAgICAgICAgICAgICAgICAgIHNtb290aDogdGhpcy5zbW9vdGgsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb3VudDogLTEsXG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lLmJpbmQoY2xvbmVkKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGN1cnJlbnRNYXRlcmlhbDogZnVuY3Rpb24gY3VycmVudE1hdGVyaWFsKCkge1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzW3RoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9maW5hbGl6ZTogZnVuY3Rpb24gX2ZpbmFsaXplKGVuZCkge1xuXG4gICAgICAgICAgICAgIHZhciBsYXN0TXVsdGlNYXRlcmlhbCA9IHRoaXMuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgIGlmIChsYXN0TXVsdGlNYXRlcmlhbCAmJiBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCA9PT0gLTEpIHtcblxuICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggLyAzO1xuICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwQ291bnQgPSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCAtIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwU3RhcnQ7XG4gICAgICAgICAgICAgICAgbGFzdE11bHRpTWF0ZXJpYWwuaW5oZXJpdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZ25vcmUgb2JqZWN0cyB0YWlsIG1hdGVyaWFscyBpZiBubyBmYWNlIGRlY2xhcmF0aW9ucyBmb2xsb3dlZCB0aGVtIGJlZm9yZSBhIG5ldyBvL2cgc3RhcnRlZC5cbiAgICAgICAgICAgICAgaWYgKGVuZCAmJiB0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtaSA9IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDE7IG1pID49IDA7IG1pLS0pIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFsc1ttaV0uZ3JvdXBDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnNwbGljZShtaSwgMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gR3VhcmFudGVlIGF0IGxlYXN0IG9uZSBlbXB0eSBtYXRlcmlhbCwgdGhpcyBtYWtlcyB0aGUgY3JlYXRpb24gbGF0ZXIgbW9yZSBzdHJhaWdodCBmb3J3YXJkLlxuICAgICAgICAgICAgICBpZiAoZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgIHNtb290aDogdGhpcy5zbW9vdGhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBsYXN0TXVsdGlNYXRlcmlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gSW5oZXJpdCBwcmV2aW91cyBvYmplY3RzIG1hdGVyaWFsLlxuICAgICAgICAgIC8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLlxuICAgICAgICAgIC8vIElmIGEgdXNlbXRsIGRlY2xhcmF0aW9uIGlzIGVuY291bnRlcmVkIHdoaWxlIHRoaXMgbmV3IG9iamVjdCBpcyBiZWluZyBwYXJzZWQsIGl0IHdpbGxcbiAgICAgICAgICAvLyBvdmVyd3JpdGUgdGhlIGluaGVyaXRlZCBtYXRlcmlhbC4gRXhjZXB0aW9uIGJlaW5nIHRoYXQgdGhlcmUgd2FzIGFscmVhZHkgZmFjZSBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG5cbiAgICAgICAgICBpZiAocHJldmlvdXNNYXRlcmlhbCAmJiBwcmV2aW91c01hdGVyaWFsLm5hbWUgJiYgdHlwZW9mIHByZXZpb3VzTWF0ZXJpYWwuY2xvbmUgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICB2YXIgZGVjbGFyZWQgPSBwcmV2aW91c01hdGVyaWFsLmNsb25lKDApO1xuICAgICAgICAgICAgZGVjbGFyZWQuaW5oZXJpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lm1hdGVyaWFscy5wdXNoKGRlY2xhcmVkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm9iamVjdHMucHVzaCh0aGlzLm9iamVjdCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIGZpbmFsaXplKCkge1xuXG4gICAgICAgICAgaWYgKHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5fZmluYWxpemUgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgdGhpcy5vYmplY3QuX2ZpbmFsaXplKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZVZlcnRleEluZGV4OiBmdW5jdGlvbiBwYXJzZVZlcnRleEluZGV4KHZhbHVlLCBsZW4pIHtcblxuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgcmV0dXJuIChpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAzKSAqIDM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VOb3JtYWxJbmRleDogZnVuY3Rpb24gcGFyc2VOb3JtYWxJbmRleCh2YWx1ZSwgbGVuKSB7XG5cbiAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgIHJldHVybiAoaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMykgKiAzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlVVZJbmRleDogZnVuY3Rpb24gcGFyc2VVVkluZGV4KHZhbHVlLCBsZW4pIHtcblxuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgcmV0dXJuIChpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAyKSAqIDI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVmVydGV4OiBmdW5jdGlvbiBhZGRWZXJ0ZXgoYSwgYiwgYykge1xuXG4gICAgICAgICAgdmFyIHNyYyA9IHRoaXMudmVydGljZXM7XG4gICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnZlcnRpY2VzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAyXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVmVydGV4TGluZTogZnVuY3Rpb24gYWRkVmVydGV4TGluZShhKSB7XG5cbiAgICAgICAgICB2YXIgc3JjID0gdGhpcy52ZXJ0aWNlcztcbiAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudmVydGljZXM7XG5cbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDFdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDJdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGROb3JtYWw6IGZ1bmN0aW9uIGFkZE5vcm1hbChhLCBiLCBjKSB7XG5cbiAgICAgICAgICB2YXIgc3JjID0gdGhpcy5ub3JtYWxzO1xuICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS5ub3JtYWxzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAyXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVVY6IGZ1bmN0aW9uIGFkZFVWKGEsIGIsIGMpIHtcblxuICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnV2cztcbiAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVVZMaW5lOiBmdW5jdGlvbiBhZGRVVkxpbmUoYSkge1xuXG4gICAgICAgICAgdmFyIHNyYyA9IHRoaXMudXZzO1xuICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7XG5cbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDFdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRGYWNlOiBmdW5jdGlvbiBhZGRGYWNlKGEsIGIsIGMsIGQsIHVhLCB1YiwgdWMsIHVkLCBuYSwgbmIsIG5jLCBuZCkge1xuXG4gICAgICAgICAgdmFyIHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuICAgICAgICAgIHZhciBpYSA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleChhLCB2TGVuKTtcbiAgICAgICAgICB2YXIgaWIgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoYiwgdkxlbik7XG4gICAgICAgICAgdmFyIGljID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KGMsIHZMZW4pO1xuICAgICAgICAgIHZhciBpZDtcblxuICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWEsIGliLCBpYyk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoZCwgdkxlbik7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVmVydGV4KGlhLCBpYiwgaWQpO1xuICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWIsIGljLCBpZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHVhICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgdmFyIHV2TGVuID0gdGhpcy51dnMubGVuZ3RoO1xuXG4gICAgICAgICAgICBpYSA9IHRoaXMucGFyc2VVVkluZGV4KHVhLCB1dkxlbik7XG4gICAgICAgICAgICBpYiA9IHRoaXMucGFyc2VVVkluZGV4KHViLCB1dkxlbik7XG4gICAgICAgICAgICBpYyA9IHRoaXMucGFyc2VVVkluZGV4KHVjLCB1dkxlbik7XG5cbiAgICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICB0aGlzLmFkZFVWKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VVVkluZGV4KHVkLCB1dkxlbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5hZGRVVihpYSwgaWIsIGlkKTtcbiAgICAgICAgICAgICAgdGhpcy5hZGRVVihpYiwgaWMsIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmEgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAvLyBOb3JtYWxzIGFyZSBtYW55IHRpbWVzIHRoZSBzYW1lLiBJZiBzbywgc2tpcCBmdW5jdGlvbiBjYWxsIGFuZCBwYXJzZUludC5cbiAgICAgICAgICAgIHZhciBuTGVuID0gdGhpcy5ub3JtYWxzLmxlbmd0aDtcbiAgICAgICAgICAgIGlhID0gdGhpcy5wYXJzZU5vcm1hbEluZGV4KG5hLCBuTGVuKTtcblxuICAgICAgICAgICAgaWIgPSBuYSA9PT0gbmIgPyBpYSA6IHRoaXMucGFyc2VOb3JtYWxJbmRleChuYiwgbkxlbik7XG4gICAgICAgICAgICBpYyA9IG5hID09PSBuYyA/IGlhIDogdGhpcy5wYXJzZU5vcm1hbEluZGV4KG5jLCBuTGVuKTtcblxuICAgICAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VOb3JtYWxJbmRleChuZCwgbkxlbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5hZGROb3JtYWwoaWEsIGliLCBpZCk7XG4gICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGliLCBpYywgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRMaW5lR2VvbWV0cnk6IGZ1bmN0aW9uIGFkZExpbmVHZW9tZXRyeSh2ZXJ0aWNlcywgdXZzKSB7XG5cbiAgICAgICAgICB0aGlzLm9iamVjdC5nZW9tZXRyeS50eXBlID0gJ0xpbmUnO1xuXG4gICAgICAgICAgdmFyIHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgICB2YXIgdXZMZW4gPSB0aGlzLnV2cy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKHZhciB2aSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IHZpIDwgbDsgdmkrKykge1xuXG4gICAgICAgICAgICB0aGlzLmFkZFZlcnRleExpbmUodGhpcy5wYXJzZVZlcnRleEluZGV4KHZlcnRpY2VzW3ZpXSwgdkxlbikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIHV2aSA9IDAsIGwgPSB1dnMubGVuZ3RoOyB1dmkgPCBsOyB1dmkrKykge1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVWTGluZSh0aGlzLnBhcnNlVVZJbmRleCh1dnNbdXZpXSwgdXZMZW4pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfTtcblxuICAgICAgc3RhdGUuc3RhcnRPYmplY3QoJycsIGZhbHNlKTtcblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG5cbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodGV4dCwgZGVidWcpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVidWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlYnVnID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUudGltZSgnT0JKTG9hZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2NyZWF0ZVBhcnNlclN0YXRlKCk7XG5cbiAgICAgIGlmICh0ZXh0LmluZGV4T2YoJ1xcclxcbicpICE9PSAtMSkge1xuXG4gICAgICAgIC8vIFRoaXMgaXMgZmFzdGVyIHRoYW4gU3RyaW5nLnNwbGl0IHdpdGggcmVnZXggdGhhdCBzcGxpdHMgb24gYm90aFxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dC5pbmRleE9mKCdcXFxcXFxuJykgIT09IC0xKSB7XG5cbiAgICAgICAgLy8gam9pbiBsaW5lcyBzZXBhcmF0ZWQgYnkgYSBsaW5lIGNvbnRpbnVhdGlvbiBjaGFyYWN0ZXIgKFxcKVxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFxcXFxuL2csICcnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgbGluZSA9ICcnLFxuICAgICAgICAgIGxpbmVGaXJzdENoYXIgPSAnJyxcbiAgICAgICAgICBsaW5lU2Vjb25kQ2hhciA9ICcnO1xuICAgICAgdmFyIGxpbmVMZW5ndGggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAvLyBGYXN0ZXIgdG8ganVzdCB0cmltIGxlZnQgc2lkZSBvZiB0aGUgbGluZS4gVXNlIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhciB0cmltTGVmdCA9IHR5cGVvZiAnJy50cmltTGVmdCA9PT0gJ2Z1bmN0aW9uJztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblxuICAgICAgICBsaW5lID0gbGluZXNbaV07XG5cbiAgICAgICAgbGluZSA9IHRyaW1MZWZ0ID8gbGluZS50cmltTGVmdCgpIDogbGluZS50cmltKCk7XG5cbiAgICAgICAgbGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuXG4gICAgICAgIGlmIChsaW5lTGVuZ3RoID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICBsaW5lRmlyc3RDaGFyID0gbGluZS5jaGFyQXQoMCk7XG5cbiAgICAgICAgLy8gQHRvZG8gaW52b2tlIHBhc3NlZCBpbiBoYW5kbGVyIGlmIGFueVxuICAgICAgICBpZiAobGluZUZpcnN0Q2hhciA9PT0gJyMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAobGluZUZpcnN0Q2hhciA9PT0gJ3YnKSB7XG5cbiAgICAgICAgICBsaW5lU2Vjb25kQ2hhciA9IGxpbmUuY2hhckF0KDEpO1xuXG4gICAgICAgICAgaWYgKGxpbmVTZWNvbmRDaGFyID09PSAnICcgJiYgKHJlc3VsdCA9IHRoaXMucmVnZXhwLnZlcnRleF9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgICAgMiAgICAgIDNcbiAgICAgICAgICAgIC8vIFtcInYgMS4wIDIuMCAzLjBcIiwgXCIxLjBcIiwgXCIyLjBcIiwgXCIzLjBcIl1cblxuICAgICAgICAgICAgc3RhdGUudmVydGljZXMucHVzaChwYXJzZUZsb2F0KHJlc3VsdFsxXSksIHBhcnNlRmxvYXQocmVzdWx0WzJdKSwgcGFyc2VGbG9hdChyZXN1bHRbM10pKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpbmVTZWNvbmRDaGFyID09PSAnbicgJiYgKHJlc3VsdCA9IHRoaXMucmVnZXhwLm5vcm1hbF9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgMSAgICAgIDIgICAgICAzXG4gICAgICAgICAgICAvLyBbXCJ2biAxLjAgMi4wIDMuMFwiLCBcIjEuMFwiLCBcIjIuMFwiLCBcIjMuMFwiXVxuXG4gICAgICAgICAgICBzdGF0ZS5ub3JtYWxzLnB1c2gocGFyc2VGbG9hdChyZXN1bHRbMV0pLCBwYXJzZUZsb2F0KHJlc3VsdFsyXSksIHBhcnNlRmxvYXQocmVzdWx0WzNdKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5lU2Vjb25kQ2hhciA9PT0gJ3QnICYmIChyZXN1bHQgPSB0aGlzLnJlZ2V4cC51dl9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAxICAgICAgMlxuICAgICAgICAgICAgLy8gW1widnQgMC4xIDAuMlwiLCBcIjAuMVwiLCBcIjAuMlwiXVxuXG4gICAgICAgICAgICBzdGF0ZS51dnMucHVzaChwYXJzZUZsb2F0KHJlc3VsdFsxXSksIHBhcnNlRmxvYXQocmVzdWx0WzJdKSk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5vbkVycm9yKFwiVW5leHBlY3RlZCB2ZXJ0ZXgvbm9ybWFsL3V2IGxpbmU6ICdcIiArIGxpbmUgKyBcIidcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmVGaXJzdENoYXIgPT09IFwiZlwiKSB7XG5cbiAgICAgICAgICBpZiAoKHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X3V2X25vcm1hbC5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsXG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICAgNyAgICA4ICAgIDkgICAxMCAgICAgICAgIDExICAgICAgICAgMTJcbiAgICAgICAgICAgIC8vIFtcImYgMS8xLzEgMi8yLzIgMy8zLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjFcIiwgXCIyXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cblxuICAgICAgICAgICAgc3RhdGUuYWRkRmFjZShyZXN1bHRbMV0sIHJlc3VsdFs0XSwgcmVzdWx0WzddLCByZXN1bHRbMTBdLCByZXN1bHRbMl0sIHJlc3VsdFs1XSwgcmVzdWx0WzhdLCByZXN1bHRbMTFdLCByZXN1bHRbM10sIHJlc3VsdFs2XSwgcmVzdWx0WzldLCByZXN1bHRbMTJdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF91di5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91diB2ZXJ0ZXgvdXYgdmVydGV4L3V2XG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICA3ICAgICAgICAgIDhcbiAgICAgICAgICAgIC8vIFtcImYgMS8xIDIvMiAzLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCByZXN1bHRbMl0sIHJlc3VsdFs0XSwgcmVzdWx0WzZdLCByZXN1bHRbOF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X25vcm1hbC5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsXG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICA3ICAgICAgICAgIDhcbiAgICAgICAgICAgIC8vIFtcImYgMS8vMSAyLy8yIDMvLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlc3VsdFsyXSwgcmVzdWx0WzRdLCByZXN1bHRbNl0sIHJlc3VsdFs4XSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXguZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgLy8gZiB2ZXJ0ZXggdmVydGV4IHZlcnRleFxuICAgICAgICAgICAgLy8gMCAgICAgICAgICAgIDEgICAgMiAgICAzICAgNFxuICAgICAgICAgICAgLy8gW1wiZiAxIDIgM1wiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbMl0sIHJlc3VsdFszXSwgcmVzdWx0WzRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJVbmV4cGVjdGVkIGZhY2UgbGluZTogJ1wiICsgbGluZSArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGluZUZpcnN0Q2hhciA9PT0gXCJsXCIpIHtcblxuICAgICAgICAgIHZhciBsaW5lUGFydHMgPSBsaW5lLnN1YnN0cmluZygxKS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgIHZhciBsaW5lVmVydGljZXMgPSBbXSxcbiAgICAgICAgICAgICAgbGluZVVWcyA9IFtdO1xuXG4gICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZihcIi9cIikgPT09IC0xKSB7XG5cbiAgICAgICAgICAgIGxpbmVWZXJ0aWNlcyA9IGxpbmVQYXJ0cztcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBmb3IgKHZhciBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpKyspIHtcblxuICAgICAgICAgICAgICB2YXIgcGFydHMgPSBsaW5lUGFydHNbbGldLnNwbGl0KFwiL1wiKTtcblxuICAgICAgICAgICAgICBpZiAocGFydHNbMF0gIT09IFwiXCIpIGxpbmVWZXJ0aWNlcy5wdXNoKHBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgaWYgKHBhcnRzWzFdICE9PSBcIlwiKSBsaW5lVVZzLnB1c2gocGFydHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZS5hZGRMaW5lR2VvbWV0cnkobGluZVZlcnRpY2VzLCBsaW5lVVZzKTtcbiAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAub2JqZWN0X3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgIC8vIG8gb2JqZWN0X25hbWVcbiAgICAgICAgICAvLyBvclxuICAgICAgICAgIC8vIGcgZ3JvdXBfbmFtZVxuXG4gICAgICAgICAgLy8gV09SS0FST1VORDogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2OVxuICAgICAgICAgIC8vIHZhciBuYW1lID0gcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpO1xuICAgICAgICAgIHZhciBuYW1lID0gKFwiIFwiICsgcmVzdWx0WzBdLnN1YnN0cigxKS50cmltKCkpLnN1YnN0cigxKTtcblxuICAgICAgICAgIHN0YXRlLnN0YXJ0T2JqZWN0KG5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmVnZXhwLm1hdGVyaWFsX3VzZV9wYXR0ZXJuLnRlc3QobGluZSkpIHtcblxuICAgICAgICAgIC8vIG1hdGVyaWFsXG5cbiAgICAgICAgICBzdGF0ZS5vYmplY3Quc3RhcnRNYXRlcmlhbChsaW5lLnN1YnN0cmluZyg3KS50cmltKCksIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZ2V4cC5tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4udGVzdChsaW5lKSkge1xuXG4gICAgICAgICAgLy8gbXRsIGZpbGVcblxuICAgICAgICAgIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzLnB1c2gobGluZS5zdWJzdHJpbmcoNykudHJpbSgpKTtcbiAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAuc21vb3RoaW5nX3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgIC8vIHNtb290aCBzaGFkaW5nXG5cbiAgICAgICAgICAvLyBAdG9kbyBIYW5kbGUgZmlsZXMgdGhhdCBoYXZlIHZhcnlpbmcgc21vb3RoIHZhbHVlcyBmb3IgYSBzZXQgb2YgZmFjZXMgaW5zaWRlIG9uZSBnZW9tZXRyeSxcbiAgICAgICAgICAvLyBidXQgZG9lcyBub3QgZGVmaW5lIGEgdXNlbXRsIGZvciBlYWNoIGZhY2Ugc2V0LlxuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGRldGVjdGVkIGFuZCBhIGR1bW15IG1hdGVyaWFsIGNyZWF0ZWQgKGxhdGVyIE11bHRpTWF0ZXJpYWwgYW5kIGdlb21ldHJ5IGdyb3VwcykuXG4gICAgICAgICAgLy8gVGhpcyByZXF1aXJlcyBzb21lIGNhcmUgdG8gbm90IGNyZWF0ZSBleHRyYSBtYXRlcmlhbCBvbiBlYWNoIHNtb290aCB2YWx1ZSBmb3IgXCJub3JtYWxcIiBvYmogZmlsZXMuXG4gICAgICAgICAgLy8gd2hlcmUgZXhwbGljaXQgdXNlbXRsIGRlZmluZXMgZ2VvbWV0cnkgZ3JvdXBzLlxuICAgICAgICAgIC8vIEV4YW1wbGUgYXNzZXQ6IGV4YW1wbGVzL21vZGVscy9vYmovY2VyYmVydXMvQ2VyYmVydXMub2JqXG5cbiAgICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgc3RhdGUub2JqZWN0LnNtb290aCA9IHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICdvbic7XG5cbiAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBzdGF0ZS5vYmplY3QuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLnNtb290aCA9IHN0YXRlLm9iamVjdC5zbW9vdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgLy8gSGFuZGxlIG51bGwgdGVybWluYXRlZCBmaWxlcyB3aXRob3V0IGV4Y2VwdGlvblxuICAgICAgICAgIGlmIChsaW5lID09PSAnXFwwJykgY29udGludWU7XG5cbiAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJVbmV4cGVjdGVkIGxpbmU6ICdcIiArIGxpbmUgKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhdGUuZmluYWxpemUoKTtcblxuICAgICAgdmFyIGNvbnRhaW5lciA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgY29udGFpbmVyLm1hdGVyaWFsTGlicmFyaWVzID0gW10uY29uY2F0KHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdGF0ZS5vYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXG4gICAgICAgIHZhciBvYmplY3QgPSBzdGF0ZS5vYmplY3RzW2ldO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG4gICAgICAgIHZhciBtYXRlcmlhbHMgPSBvYmplY3QubWF0ZXJpYWxzO1xuICAgICAgICB2YXIgaXNMaW5lID0gZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmUnO1xuXG4gICAgICAgIC8vIFNraXAgby9nIGxpbmUgZGVjbGFyYXRpb25zIHRoYXQgZGlkIG5vdCBmb2xsb3cgd2l0aCBhbnkgZmFjZXNcbiAgICAgICAgaWYgKGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgdmFyIGJ1ZmZlcmdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cbiAgICAgICAgYnVmZmVyZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS52ZXJ0aWNlcyksIDMpKTtcblxuICAgICAgICBpZiAoZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS5ub3JtYWxzKSwgMykpO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZW9tZXRyeS51dnMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS51dnMpLCAyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgbWF0ZXJpYWxzXG5cbiAgICAgICAgdmFyIGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBtaSA9IDAsIG1pTGVuID0gbWF0ZXJpYWxzLmxlbmd0aDsgbWkgPCBtaUxlbjsgbWkrKykge1xuXG4gICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5tYXRlcmlhbHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFscy5jcmVhdGUoc291cmNlTWF0ZXJpYWwubmFtZSk7XG5cbiAgICAgICAgICAgIC8vIG10bCBldGMuIGxvYWRlcnMgcHJvYmFibHkgY2FuJ3QgY3JlYXRlIGxpbmUgbWF0ZXJpYWxzIGNvcnJlY3RseSwgY29weSBwcm9wZXJ0aWVzIHRvIGEgbGluZSBtYXRlcmlhbC5cbiAgICAgICAgICAgIGlmIChpc0xpbmUgJiYgbWF0ZXJpYWwgJiYgIShtYXRlcmlhbCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKSkge1xuXG4gICAgICAgICAgICAgIHZhciBtYXRlcmlhbExpbmUgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgbWF0ZXJpYWxMaW5lLmNvcHkobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICBtYXRlcmlhbCA9IG1hdGVyaWFsTGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gIWlzTGluZSA/IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpIDogbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gc291cmNlTWF0ZXJpYWwubmFtZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRlcmlhbC5zaGFkaW5nID0gc291cmNlTWF0ZXJpYWwuc21vb3RoID8gVEhSRUUuU21vb3RoU2hhZGluZyA6IFRIUkVFLkZsYXRTaGFkaW5nO1xuXG4gICAgICAgICAgY3JlYXRlZE1hdGVyaWFscy5wdXNoKG1hdGVyaWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBtZXNoXG5cbiAgICAgICAgdmFyIG1lc2g7XG5cbiAgICAgICAgaWYgKGNyZWF0ZWRNYXRlcmlhbHMubGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgZm9yICh2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW47IG1pKyspIHtcblxuICAgICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEdyb3VwKHNvdXJjZU1hdGVyaWFsLmdyb3VwU3RhcnQsIHNvdXJjZU1hdGVyaWFsLmdyb3VwQ291bnQsIG1pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbXVsdGlNYXRlcmlhbCA9IG5ldyBUSFJFRS5NdWx0aU1hdGVyaWFsKGNyZWF0ZWRNYXRlcmlhbHMpO1xuICAgICAgICAgIG1lc2ggPSAhaXNMaW5lID8gbmV3IFRIUkVFLk1lc2goYnVmZmVyZ2VvbWV0cnksIG11bHRpTWF0ZXJpYWwpIDogbmV3IFRIUkVFLkxpbmVTZWdtZW50cyhidWZmZXJnZW9tZXRyeSwgbXVsdGlNYXRlcmlhbCk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBtZXNoID0gIWlzTGluZSA/IG5ldyBUSFJFRS5NZXNoKGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWzBdKSA6IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzaC5uYW1lID0gb2JqZWN0Lm5hbWU7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZChtZXNoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnT0JKTG9hZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gIH07XG59OyIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBoZWFkIGZyb20gJy4uLy4uL29iai9tYWxlLm9iaic7XG5pbXBvcnQgTGlnaHRzIGZyb20gJy4uL0xpZ2h0cy9Ud29EaXJlY3Rpb25hbHMnO1xuaW1wb3J0IEJhc2ljU3BoZXJlIGZyb20gJy4uL09iamVjdHMvQmFzaWNTcGhlcmUnO1xuaW1wb3J0IEJhc2ljQ3ViZSBmcm9tICcuLi9PYmplY3RzL0Jhc2ljQ3ViZSc7XG5pbXBvcnQgKiBhcyBPQkpMb2FkZXIgZnJvbSAndGhyZWUtb2JqLWxvYWRlcic7XG5PQkpMb2FkZXIoVEhSRUUpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXNzYWpvdXgge1xuICBjb25zdHJ1Y3Rvcih7c2NlbmUsIG9uTG9hZH0pIHtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5zZXR1cENhbWVyYSgpO1xuICAgIFxuICAgIHNjZW5lLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICBzY2VuZS5yZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNvZnRTaGFkb3dNYXA7XG5cbiAgICB0aGlzLnJvb3QgPSBuZXcgVEhSRUUuR3JvdXAoKTtcblxuICAgIHRoaXMud2lyZU1hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG4gICAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgICB3aXJlZnJhbWU6IHRydWVcbiAgICB9KTtcblxuICAgIGNvbnN0IGxvYWRpbmdDdWJlTWF0ID0gXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xuICAgICAgICBlbWlzc2l2ZTogMHg1ZTAzMTEsXG4gICAgICAgIGZsYXRTaGFkaW5nOiB0cnVlXG4gICAgICB9KVxuICAgIDtcblxuICAgIHRoaXMubG9hZGluZ0N1YmUgPSBuZXcgQmFzaWNDdWJlKHtcbiAgICAgIHNpemU6NixcbiAgICAgIG1hdGVyaWFsOiBsb2FkaW5nQ3ViZU1hdCxcbiAgICB9KTtcblxuICAgIHRoaXMucm9vdC5hZGQodGhpcy5sb2FkaW5nQ3ViZS5yb290KTtcblxuICAgIHRoaXMubG9hZGluZygwLjUpO1xuXG4gICAgdGhpcy5zZXR1cExpZ2h0cygpO1xuXG4gICAgdGhpcy5jcmVhdGVTcGhlcmVzKCk7XG4gICAgXG4gICAgdGhpcy5sb2FkSGVhZCgpO1xuXG4gICAgaWYgKG9uTG9hZCkgb25Mb2FkKCk7XG4gIH1cblxuICBsb2FkaW5nKHBlcmNlbnRhZ2UpIHsgICAgXG4gICAgdGhpcy5sb2FkaW5nQ3ViZS5yb290LnNjYWxlLmNvcHkoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMygxLCBwZXJjZW50YWdlLCAxKVxuICAgICk7XG5cbiAgICB0aGlzLmxvYWRpbmdDdWJlLnJvb3QucG9zaXRpb24uY29weShcbiAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDAsXG4gICAgICAgIC0wLjUgKiB0aGlzLmxvYWRpbmdDdWJlLnJvb3QuZ2VvbWV0cnkucGFyYW1ldGVycy5oZWlnaHQgKiAoMSAtIHBlcmNlbnRhZ2UpLFxuICAgICAgICAwKVxuICAgIClcblxuICAgIHZhciBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICBxdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICksIChNYXRoLlBJICogLTIpICogcGVyY2VudGFnZSApO1xuICAgIHRoaXMubG9hZGluZ0N1YmUucm9vdC5xdWF0ZXJuaW9uLmNvcHkocXVhdGVybmlvbilcbiAgfVxuXG4gIHNldHVwTGlnaHRzKCkge1xuICAgIGNvbnN0IGxpZ2h0cyA9IG5ldyBMaWdodHMoe1xuICAgICAgaW50ZW5zaXR5OiAxLjgsXG4gICAgICBjYXN0U2hhZG93OiB0cnVlLFxuICAgICAgYmlhczogMC4wMDAwMixcbiAgICAgIHByb2plY3Rpb25TaWRlczogMi41LFxuICAgICAgbWFwU2l6ZTogMjA0OFxuICAgIH0pO1xuICAgIGxpZ2h0cy5yb3RhdGVZKE1hdGguUEkpO1xuICAgIHRoaXMucm9vdC5hZGQobGlnaHRzKTtcbiAgfVxuXG4gIHNldHVwQ2FtZXJhKCkge1xuICAgIGNvbnN0IGZydXN0dW1TaXplID0gMTA7XG4gICAgY29uc3QgYXNwZWN0ID0gdGhpcy5zY2VuZS5jYW1lcmEuYXNwZWN0O1xuICAgIHRoaXMuc2NlbmUuY2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYShcbiAgICAgIGZydXN0dW1TaXplICogYXNwZWN0IC8gLTIsXG4gICAgICBmcnVzdHVtU2l6ZSAqIGFzcGVjdCAvIDIsXG4gICAgICBmcnVzdHVtU2l6ZSAvIDIsXG4gICAgICBmcnVzdHVtU2l6ZSAvIC0yLFxuICAgICAgMSxcbiAgICAgIDE1MCk7XG4gICAgdGhpcy5zY2VuZS5jYW1lcmEucG9zaXRpb24uY29weShuZXcgVEhSRUUuVmVjdG9yMygwLCAzLjUsIDEwKSk7XG4gICAgdGhpcy5zY2VuZS5jYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApKTtcbiAgfVxuXG4gIGNyZWF0ZVNwaGVyZXMoKSB7XG4gICAgY29uc3Qgc3BoZXJlTWF0ID0gW1xuICAgICAgbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgZmxhdFNoYWRpbmc6IHRydWUsXG4gICAgICAgIHJvdWdobmVzczogMFxuICAgICAgfSksXG4gICAgICB0aGlzLndpcmVNYXRcbiAgICBdO1xuICAgIGNvbnN0IHNwaGVyZU1hdDIgPSBbXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xuICAgICAgICBlbWlzc2l2ZTogMHg1ZTAzMTEsXG4gICAgICAgIGZsYXRTaGFkaW5nOiB0cnVlXG4gICAgICB9KSxcbiAgICAgIHRoaXMud2lyZU1hdFxuICAgIF07XG4gICAgdGhpcy5zcGhlcmVzID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgdGhpcy5zcGhlcmVBID0gbmV3IEJhc2ljU3BoZXJlKHtcbiAgICAgIHNpemU6IDgsXG4gICAgICB3aWR0aFNlZ21lbnRzOiA2LFxuICAgICAgaGVpZ2h0U2VnbWVudHM6IDYsXG4gICAgICBtYXRlcmlhbDogc3BoZXJlTWF0LFxuICAgICAgY2FzdFNoYWRvdzogdHJ1ZSxcbiAgICAgIHJlY2VpdmVTaGFkb3c6IHRydWUsXG4gICAgfSk7XG4gICAgdGhpcy5zcGhlcmVBLnJvb3QucG9zaXRpb24uY29weShcbiAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDIuNSwgMCwgMylcbiAgICApO1xuICAgIFxuICAgIHRoaXMuc3BoZXJlQiA9IG5ldyBCYXNpY1NwaGVyZSh7XG4gICAgICBzaXplOiA3LFxuICAgICAgd2lkdGhTZWdtZW50czogNyxcbiAgICAgIGhlaWdodFNlZ21lbnRzOiA2LFxuICAgICAgbWF0ZXJpYWw6IHNwaGVyZU1hdCxcbiAgICAgIGNhc3RTaGFkb3c6IHRydWUsXG4gICAgICByZWNlaXZlU2hhZG93OiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMuc3BoZXJlQi5yb290LnBvc2l0aW9uLmNvcHkoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMygyLCAwLjUsIC03KVxuICAgICk7XG4gICAgXG4gICAgdGhpcy5zcGhlcmVDID0gbmV3IEJhc2ljU3BoZXJlKHtcbiAgICAgIHNpemU6IDUsXG4gICAgICB3aWR0aFNlZ21lbnRzOiA1LFxuICAgICAgaGVpZ2h0U2VnbWVudHM6IDQsXG4gICAgICBtYXRlcmlhbDogc3BoZXJlTWF0MixcbiAgICAgIGNhc3RTaGFkb3c6IHRydWUsXG4gICAgICByZWNlaXZlU2hhZG93OiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMuc3BoZXJlQy5yb290LnBvc2l0aW9uLmNvcHkoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMygtNi41LCAwLjUsIC0xKVxuICAgICk7XG4gICAgXG4gICAgdGhpcy5zcGhlcmVzLmFkZCh0aGlzLnNwaGVyZUEucm9vdCk7XG4gICAgdGhpcy5zcGhlcmVzLmFkZCh0aGlzLnNwaGVyZUIucm9vdCk7XG4gICAgdGhpcy5zcGhlcmVzLmFkZCh0aGlzLnNwaGVyZUMucm9vdCk7XG4gICAgXG4gICAgdGhpcy5zcGhlcmVzLnBvc2l0aW9uLmNvcHkoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMygwLCA4LCAwKVxuICAgICk7XG4gIH1cblxuICBsb2FkSGVhZCgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuT0JKTG9hZGVyKCk7XG4gICAgdGhpcy5vbkhlYWRSZWFkeSA9IHRoaXMub25IZWFkUmVhZHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSGVhZExvYWRpbmcgPSB0aGlzLm9uSGVhZExvYWRpbmcuYmluZCh0aGlzKTtcbiAgICBsb2FkZXIubG9hZChcbiAgICAgIGhlYWQsXG4gICAgICB0aGlzLm9uSGVhZFJlYWR5LFxuICAgICAgdGhpcy5vbkhlYWRMb2FkaW5nLFxuICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdBbiBlcnJvciBoYXBwZW5lZCcsIGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgb25IZWFkTG9hZGluZyh4aHIpIHtcbiAgICBjb25zdCBsb2FkaW5nID0geGhyLmxvYWRlZCAvIHhoci50b3RhbDtcbiAgICBjb25zb2xlLmxvZygobG9hZGluZyAqIDEwMCkgKyAnJSBsb2FkZWQnKTtcbiAgICBcbiAgICB0aGlzLmxvYWRpbmcoTWF0aC5zaW4obG9hZGluZykpO1xuICB9XG5cbiAgb25IZWFkUmVhZHkob2JqZWN0KSB7XG4gICAgdGhpcy5yb290LnJlbW92ZSggdGhpcy5sb2FkaW5nQ3ViZS5yb290ICk7XG4gICAgdGhpcy5sb2FkaW5nQ3ViZSA9IG51bGw7XG4gICAgXG4gICAgb2JqZWN0LnNjYWxlLmNvcHkobmV3IFRIUkVFLlZlY3RvcjMoMC4yLCAwLjIsIDAuMikpO1xuICAgIG9iamVjdC50cmF2ZXJzZSgob2JqKSA9PiB7XG4gICAgICBvYmoucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICBvYmouY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICBpZiAob2JqLm5hbWUgJiYgb2JqLm5hbWUuaW5kZXhPZignb2NjaGlvJykgPj0gMCkge1xuICAgICAgICBvYmoubWF0ZXJpYWwuY29sb3Iuc2V0UkdCKDAsIDAsIDApO1xuICAgICAgICBvYmoubWF0ZXJpYWwuc3BlY3VsYXIuc2V0UkdCKDAuMSwgMC4xLCAwLjEpO1xuICAgICAgICBvYmoubWF0ZXJpYWwucm91Z2huZXNzID0gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnJvb3QuYWRkKG9iamVjdCk7XG4gICAgdGhpcy5oZWFkID0gb2JqZWN0O1xuICAgIHRoaXMuaGVhZC5yb3RhdGVZKC0oTWF0aC5QSSAqIDAuMjUpKTtcbiAgICB0aGlzLmhlYWQuYWRkKHRoaXMuc3BoZXJlcyk7XG4gIH1cblxuICB1cGRhdGUodGltZUVsYXBzZWQsIGRlbHRhKSB7XG4gICAgaWYgKHRoaXMuaGVhZCkge1xuICAgICAgY29uc3QgYW5pbWF0aW9uVGltZSA9IHRpbWVFbGFwc2VkICogMC4xO1xuICAgICAgdGhpcy5oZWFkLnJvdGF0ZVkoKE1hdGguc2luKGFuaW1hdGlvblRpbWUpKSAqIGRlbHRhICogMC4xKTtcblxuICAgICAgdGhpcy5zcGhlcmVBLnJvb3Qucm90YXRlWSgwLjMgKiBkZWx0YSk7XG4gICAgICB0aGlzLnNwaGVyZUEucm9vdC5yb3RhdGVYKDAuNiAqIGRlbHRhKTtcblxuICAgICAgdGhpcy5zcGhlcmVCLnJvb3Qucm90YXRlWSgtMC40ICogZGVsdGEpO1xuICAgICAgdGhpcy5zcGhlcmVCLnJvb3Qucm90YXRlWCgtMC42ICogZGVsdGEpO1xuXG4gICAgICB0aGlzLnNwaGVyZUMucm9vdC5yb3RhdGVZKC0wLjQgKiBkZWx0YSk7XG4gICAgICB0aGlzLnNwaGVyZUMucm9vdC5yb3RhdGVYKDAuNiAqIGRlbHRhKTtcbiAgICAgIHRoaXMuc3BoZXJlQy5yb290LnJvdGF0ZVooMC45ICogZGVsdGEpO1xuICAgIH1cbiAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9
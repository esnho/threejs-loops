(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{106:function(t,e,o){"use strict";o.d(e,"a",function(){return c});var n=o(104);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var o=new n.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),t.add(o),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,n["Group"]),e}()},107:function(t,e,o){"use strict";o.d(e,"a",function(){return p});var n=o(104);o(106);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function a(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var h={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},p=function(t){function e(){var t,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,a=new Array(r),u=0;u<r;u++)a[u]=arguments[u];o=s(this,(t=c(e)).call.apply(t,[this].concat(a)));var p=function(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},n=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),n.forEach(function(e){i(t,e,o[e])})}return t}({},h,a[0]),f=p.intensity,l=p.castShadow,y=p.bias,m=p.projectionSides,d=p.mapSize;o.intensity=f,o.projectionSides=m,o.mapSize=d,console.log("mapsize",o.mapSize);var w=new n.DirectionalLight("white",.65*o.intensity),b=new n.DirectionalLight("white",.55*o.intensity);return w.shadow.bias=y||0,b.shadow.bias=y||0,w.castShadow=l,b.castShadow=l,o.updateProjection(w,o.projectionSides),o.updateProjection(b,o.projectionSides),o.updateShadowMap(w,o.mapSize),o.updateShadowMap(b,o.mapSize),w.position.copy(new n.Vector3(9,3.5,0)),b.position.copy(new n.Vector3(-10,2,0)),o.add(w,b),o}var o,r,p;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,n["Group"]),o=e,(r=[{key:"updateProjection",value:function(t,e){t.shadow.camera.left=-e,t.shadow.camera.right=e,t.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(t,e){t.shadow.mapSize.width=e,t.shadow.mapSize.height=e}}])&&a(o.prototype,r),p&&a(o,p),e}()},108:function(t,e,o){"use strict";o.d(e,"a",function(){return r});var n=o(104);var r=function t(e){var o=e.size,r=void 0===o?5:o,i=e.material,a=e.position,s=e.widthSegments,c=e.heightSegments,u=e.castShadow,h=e.receiveShadow;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var p=1,f=1,l=1;this.color=new n.Color,this.color.setRGB(p,f,l),this.material=i||new n.MeshBasicMaterial({color:this.color});var y=this.material.length>1?n.SphereBufferGeometry:n.SphereGeometry;if(this.geometry=new y(r,s||7,c||9),this.material.length){this.geometry.clearGroups();for(var m=0;m<i.length;m++)this.geometry.addGroup(0,1/0,m)}this.mesh=new n.Mesh(this.geometry,this.material),this.mesh.castShadow=u,this.mesh.receiveShadow=h,a&&this.mesh.position.copy(a),this.root=this.mesh}},33:function(t,e,o){"use strict";o.r(e),o.d(e,"default",function(){return s});var n=o(104),r=o(107),i=o(108);function a(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function t(e){var o=e.scene,r=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scene=o,this.setupCamera(),this.root=new n.Group,this.setupLights(),this.initScene(),r&&r()}var e,o,s;return e=t,(o=[{key:"initScene",value:function(){var t=new n.MeshStandardMaterial({flatShading:!0});this.sphere=new i.a({size:4,material:t,widthSegments:6,heightSegments:4}),this.root.add(this.sphere.root),this.startCrasy(this.sphere,.5,4)}},{key:"startCrasy",value:function(t,e,o,r){var a=this,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(r=r||t.root.geometry.vertices.length,s<r){var c=new i.a({size:t.geometry.parameters.radius*e,material:t.material,widthSegments:Math.max(t.geometry.parameters.widthSegments-1,1),heightSegments:Math.max(t.geometry.parameters.heightSegments-1,1)});t.root.add(c.root);var u=t.root.geometry.vertices[s].clone();c.root.position.copy(u);var h=new n.Vector3(0,1,0);c.root.quaternion.setFromUnitVectors(h,u.sub(t.root.position).clone().normalize()),s++,window.requestAnimationFrame(function(){a.startCrasy(t,e,o,r,s),--o>0&&window.requestAnimationFrame(function(){a.startCrasy(c,e,o)})})}}},{key:"setupLights",value:function(){var t=new r.a({intensity:1.8,castShadow:!0,bias:2e-5,projectionSides:6.5,mapSize:1024});t.rotateY(Math.PI),this.root.add(t)}},{key:"setupCamera",value:function(){this.scene.camera.position.copy(new n.Vector3(0,4.5,18)),this.scene.camera.lookAt(new n.Vector3(0,0,0))}},{key:"update",value:function(t,e){this.sphere.root.rotateY(.5*e),this.sphere.root.rotateX(.2*e)}}])&&a(e.prototype,o),s&&a(e,s),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
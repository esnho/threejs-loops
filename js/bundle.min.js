!function(e){function n(n){for(var t,o,i=n[0],a=n[1],s=0,c=[];s<i.length;s++)o=i[s],r[o]&&c.push(r[o][0]),r[o]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t]);for(u&&u(n);c.length;)c.shift()()}var t={},r={5:0};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(e){var n=[],t=r[e];if(0!==t)if(t)n.push(t[2]);else{var i=new Promise(function(n,o){t=r[e]=[n,o]});n.push(t[2]=i);var a,s=document.getElementsByTagName("head")[0],u=document.createElement("script");u.charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.src=function(e){return o.p+"./js/"+({0:"vendors~CubeLoop~GridLoop~SkyscrapersLoop~basic-scene",1:"CubeLoop",2:"GridLoop",3:"SkyscrapersLoop",4:"basic-scene"}[e]||e)+".bundle.js"}(e),a=function(n){u.onerror=u.onload=null,clearTimeout(c);var t=r[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src,a=new Error("Loading chunk "+e+" failed.\n("+o+": "+i+")");a.type=o,a.request=i,t[1](a)}r[e]=void 0}};var c=setTimeout(function(){a({type:"timeout",target:u})},12e4);u.onerror=u.onload=a,s.appendChild(u)}return Promise.all(n)},o.m=e,o.c=t,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o.oe=function(e){throw console.error(e),e};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=n,i=i.slice();for(var s=0;s<i.length;s++)n(i[s]);var u=a;o(o.s=5)}([function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var n={};return function(e){if(void 0===n[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),u=null,c=0,l=[],f=t(8);function d(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(y(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,n){for(var t=[],r={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),l.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function v(e){var n=document.createElement("style");return e.attrs.type="text/css",b(n,e.attrs),h(e,n),n}function b(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function y(e,n){var t,r,o,i;if(n.transform&&e.css){if(!(i=n.transform(e.css)))return function(){};e.css=i}if(n.singleton){var a=c++;t=u||(u=v(n)),r=L.bind(null,t,a,!1),o=L.bind(null,t,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",b(n,e.attrs),h(e,n),n}(n),r=function(e,n,t){var r=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,n),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=v(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=p(e,n);return d(t,n),function(e){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}e&&d(p(e,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var g,w=(g=[],function(e,n){return g[e]=n,g.filter(Boolean).join("\n")});function L(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}},,,,function(e,n,t){"use strict";t.r(n);t(6);function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(new(function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,o,i;return n=e,(o=[{key:"Init",value:function(){this.CreateMenu()}},{key:"CreateMenu",value:function(){var e=this;this.menu=document.createElement("ul"),this.menu.setAttribute("id","menu"),this.menu.setAttribute("class","show"),document.body.appendChild(this.menu),window.setTimeout(function(){return e.ShowHideMenu()},1e3),this.menu.appendChild(this.MenuElement("Close rendering",function(n){e.DestroyScene(),e.SelectMenuVoice(n.target)}));var n=document.createElement("a");n.innerHTML="&#9776",n.setAttribute("id","menu-ctrl"),n.addEventListener("click",function(){return e.ShowHideMenu()}),document.body.appendChild(n),this.PopulateMenu()}},{key:"PopulateMenu",value:function(){this.AddLoopButton("Cube Loop","CubeLoop.js"),this.AddLoopButton("Grid Loop 0","GridLoop.js"),this.AddLoopButton("Skyscrapers","SkyscrapersLoop.js").classList.add("selected")}},{key:"AddLoopButton",value:function(e,n){var r=this;return this.menu.appendChild(this.MenuElement(e,function(e){r.SelectMenuVoice(e.target);var o=n;t(9)("./"+o).then(function(e){var n=e.default;r.StartLoop(n)})}))}},{key:"SelectMenuVoice",value:function(e){var n=!0,t=!1,r=void 0;try{for(var o,i=this.menu.childNodes[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){o.value.classList.remove("selected")}}catch(e){t=!0,r=e}finally{try{n||null==i.return||i.return()}finally{if(t)throw r}}e.classList.add("selected")}},{key:"StartLoop",value:function(e){var n=this;this.DestroyScene(),Promise.all([t.e(0),t.e(4)]).then(t.bind(null,10)).then(function(t){n.basicScene=new t.default,n.basicScene.InitScene(),n.loop=new e(n.basicScene),n.basicScene.Add(n.loop)})}},{key:"MenuElement",value:function(e,n){var t=document.createElement("li");return t.innerHTML=e,t.addEventListener("click",n),t}},{key:"ShowHideMenu",value:function(){var e=this.menu.getAttribute("class");this.menu.classList.remove(e),this.menu.offsetWidth,this.menu.classList.add("hide"===e?"show":"hide")}},{key:"DestroyScene",value:function(){this.basicScene&&(this.basicScene.Destroy(),this.basicScene=null)}}])&&r(n.prototype,o),i&&r(n,i),e}())).Init()},function(e,n,t){var r=t(7);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0};t(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(0)(void 0)).push([e.i,"body {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    overflow: hidden;\r\n    background-color: lightgray;\r\n}\r\n\r\ncanvas {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: -10;\r\n}\r\n\r\n#menu {\r\n    position: absolute;\r\n    top: 0;\r\n    height: 100vh;\r\n    background: white;\r\n    padding: 0.5em 2em 0 1.0em;\r\n    margin: 0;\r\n    display: flex;\r\n    flex-flow: column;\r\n    font-size: 1.2em;\r\n}\r\n\r\n#menu li {\r\n    margin: 0.1em 0;\r\n    list-style: none;\r\n    font-family: monospace;\r\n    font-variant: all-small-caps;\r\n    font-size: 1.3em;\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: block;\r\n    margin-bottom: 0.2em;\r\n    padding: 0.5em 0;\r\n}\r\n\r\n#menu li:hover {\r\n    text-shadow: 2px 2px gray;\r\n    left: -2px;\r\n    top: -2px;\r\n    color: lightgray;\r\n}\r\n\r\n#menu li.selected {\r\n    font-weight: bold;\r\n}\r\n\r\n#menu-ctrl {\r\n    position: absolute;\r\n    left: 0.1em;\r\n    bottom: 0.1em;\r\n    display: block;\r\n    font-size: 2.5em;\r\n    color: #f5f5f5;\r\n    text-shadow: 2px 2px #999;\r\n    cursor: pointer;\r\n    transform: translate(35%, 0) scaleX(1.4);\r\n}\r\n\r\n#menu.show {\r\n    animation-name: menu-anim;\r\n    animation-duration: 0.5s;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: normal;\r\n}\r\n\r\n#menu.hide {\r\n    animation-name: menu-anim;\r\n    animation-duration: 0.5s;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: reverse;\r\n}\r\n\r\n@keyframes menu-anim {\r\n    from {left: calc(-25vw - 1em)}\r\n    to {left: 0vw}\r\n}",""])},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,t){var r={"./CubeLoop":[3,0,1],"./CubeLoop.js":[3,0,1],"./GridLoop":[4,0,2],"./GridLoop.js":[4,0,2],"./SkyscrapersLoop":[2,0,3],"./SkyscrapersLoop.js":[2,0,3]};function o(e){var n=r[e];return n?Promise.all(n.slice(1).map(t.e)).then(function(){var e=n[0];return t(e)}):Promise.resolve().then(function(){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n})}o.keys=function(){return Object.keys(r)},o.id=9,e.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
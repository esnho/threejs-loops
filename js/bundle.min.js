!function(n){function e(e){for(var t,o,i=e[0],a=e[1],s=0,l=[];s<i.length;s++)o=i[s],r[o]&&l.push(r[o][0]),r[o]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t]);for(u&&u(e);l.length;)l.shift()()}var t={},r={7:0};function o(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var i=new Promise(function(e,o){t=r[n]=[e,o]});e.push(t[2]=i);var a,s=document.getElementsByTagName("head")[0],u=document.createElement("script");u.charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.src=function(n){return o.p+"./js/"+({0:"vendors~CubeLoop~FloatingBio~GridLoop~SkyscrapersLoop~SunLoop~basic-scene",1:"CubeLoop",2:"FloatingBio",3:"GridLoop",4:"SkyscrapersLoop",5:"SunLoop",6:"basic-scene"}[n]||n)+".bundle.js"}(n),a=function(e){u.onerror=u.onload=null,clearTimeout(l);var t=r[n];if(0!==t){if(t){var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src,a=new Error("Loading chunk "+n+" failed.\n("+o+": "+i+")");a.type=o,a.request=i,t[1](a)}r[n]=void 0}};var l=setTimeout(function(){a({type:"timeout",target:u})},12e4);u.onerror=u.onload=a,s.appendChild(u)}return Promise.all(e)},o.m=n,o.c=t,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="",o.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=e,i=i.slice();for(var s=0;s<i.length;s++)e(i[s]);var u=a;o(o.s=7)}([function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(n){var e={};return function(n){if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),u=null,l=0,c=[],d=t(10);function f(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(y(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),c.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=c.indexOf(n);e>=0&&c.splice(e,1)}function v(n){var e=document.createElement("style");return n.attrs.type="text/css",b(e,n.attrs),h(n,e),e}function b(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function y(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i=e.transform(n.css)))return function(){};n.css=i}if(e.singleton){var a=l++;t=u||(u=v(e)),r=L.bind(null,t,a,!1),o=L.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",b(e,n.attrs),h(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=v(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=p(n,e);return f(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}n&&f(p(n,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var g,w=(g=[],function(n,e){return g[n]=e,g.filter(Boolean).join("\n")});function L(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},,,,,,function(n,e,t){"use strict";t.r(e);t(8);function r(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}(new(function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.loops=[]}var e,o,i;return e=n,(o=[{key:"Init",value:function(){this.CreateMenu(),this.AddCloseRendererToMenu(),this.PopulateMenu(),this.CreateOpenMenuButton()}},{key:"CreateMenu",value:function(){this.menu=document.createElement("ul"),this.menu.setAttribute("id","menu"),this.menu.setAttribute("class","show"),document.body.appendChild(this.menu)}},{key:"AddCloseRendererToMenu",value:function(){var n=this;this.menu.appendChild(this.MenuElement("Close rendering",function(e){n.DestroyScene(),n.SelectMenuVoice(e.target)}))}},{key:"PopulateMenu",value:function(){this.loops.push(this.AddLoopButton("Cube Loop","CubeLoop.js")),this.loops.push(this.AddLoopButton("Grid Loop 0","GridLoop.js")),this.loops.push(this.AddLoopButton("Skyscrapers","SkyscrapersLoop.js")),this.loops.push(this.AddLoopButton("Sun Loop","SunLoop.js")),this.loops.push(this.AddLoopButton("Floating Bio","FloatingBio.js"))}},{key:"AddLoopButton",value:function(n,e){var t=this,r=this.MenuElement(n,function(n){return t.StartLoop(n.target)});return r.setAttribute("loopName",e),this.menu.appendChild(r)}},{key:"MenuElement",value:function(n,e){var t=document.createElement("li");return t.innerHTML=n,t.addEventListener("click",e),t}},{key:"StartLoop",value:function(n){var e=this;this.SelectMenuVoice(n),console.log("starting loop"),this.StartLoading(),t(11)("./"+n.getAttribute("loopname")).then(function(n){var t=n.default;e.InstantiateLoop(t)})}},{key:"StartLoading",value:function(){this.loading||(this.loading=document.createElement("div"),this.loading.className="loading",document.body.append(this.loading))}},{key:"StopLoading",value:function(){this.loading&&(this.loading.remove(),this.loading=null)}},{key:"SelectMenuVoice",value:function(n){var e=!0,t=!1,r=void 0;try{for(var o,i=this.menu.childNodes[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){o.value.classList.remove("selected")}}catch(n){t=!0,r=n}finally{try{e||null==i.return||i.return()}finally{if(t)throw r}}n.classList.add("selected")}},{key:"InstantiateLoop",value:function(n){var e=this;this.DestroyScene(),Promise.all([t.e(0),t.e(6)]).then(t.bind(null,12)).then(function(t){e.basicScene=new t.default,e.basicScene.InitScene(),e.loop=new n({scene:e.basicScene,onLoad:function(){return e.StopLoading()}}),e.basicScene.Add(e.loop)})}},{key:"CreateOpenMenuButton",value:function(){var n=this,e=document.createElement("a");e.innerHTML="&#9776",e.setAttribute("id","menu-ctrl"),e.addEventListener("click",function(){return n.ShowHideMenu()}),document.body.appendChild(e)}},{key:"ShowHideMenu",value:function(){var n=this.menu.getAttribute("class");this.menu.classList.remove(n),this.menu.offsetWidth,this.menu.classList.add("hide"===n?"show":"hide")}},{key:"DestroyScene",value:function(){this.basicScene&&(this.basicScene.Destroy(),this.basicScene=null)}}])&&r(e.prototype,o),i&&r(e,i),n}())).Init()},function(n,e,t){var r=t(9);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0};t(1)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(0)(void 0)).push([n.i,'body {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    overflow: hidden;\r\n    background-color: lightgray;\r\n}\r\n\r\ncanvas {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: -10;\r\n}\r\n\r\n\r\n#menu {\r\n    position: absolute;\r\n    top: 0;\r\n    height: 100vh;\r\n    background: white;\r\n    padding: 0.5em 2em 0 1.0em;\r\n    margin: 0;\r\n    display: flex;\r\n    flex-flow: column;\r\n    font-size: 3em;\r\n    opacity: 0.7;\r\n}\r\n\r\n\r\n@media only screen \r\nand (min-device-width: 768px) \r\nand (max-device-width: 1024px)\r\nand (-webkit-min-device-pixel-ratio: 2) { \r\n    #menu {\r\n        font-size: 1.3em;\r\n    }\r\n}\r\n\r\n@media only screen\r\nand (min-device-width : 360px)\r\nand (max-device-width : 640px){\r\n    #menu {\r\n        font-size: 1.3em;\r\n    }\r\n}\r\n\r\n@media only screen  \r\nand (max-device-width: 500px)\r\nand (-webkit-min-device-pixel-ratio: 3)\r\nand (orientation: portrait) { \r\n      #menu {\r\n          font-size: 1.35em;\r\n      }\r\n  }\r\n\r\n@media only screen  \r\nand (max-device-width: 1024px)\r\nand (-webkit-min-device-pixel-ratio: 3)\r\nand (orientation: landscape) { \r\n    #menu {\r\n        font-size: 1.35em;\r\n    }\r\n}\r\n\r\n@media only screen \r\nand (min-device-width: 1025px)\r\nand (orientation: landscape) {\r\n    #menu {\r\n        font-size: 1em;\r\n    }\r\n}\r\n\r\n#menu li {\r\n    margin: 0.1em 0;\r\n    list-style: none;\r\n    font-family: monospace;\r\n    font-variant: all-small-caps;\r\n    font-size: 1.3em;\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: block;\r\n    margin-bottom: 0.2em;\r\n    padding: 0.5em 0;\r\n}\r\n\r\n#menu li:hover {\r\n    text-shadow: 2px 2px gray;\r\n    left: -2px;\r\n    top: -2px;\r\n    color: lightgray;\r\n}\r\n\r\n#menu li.selected {\r\n    font-weight: bold;\r\n}\r\n\r\n#menu-ctrl {\r\n    position: absolute;\r\n    left: 0.1em;\r\n    bottom: 0.1em;\r\n    display: block;\r\n    font-size: 2.5em;\r\n    color: #f5f5f5;\r\n    text-shadow: 2px 2px #999;\r\n    cursor: pointer;\r\n    transform: translate(35%, 0) scaleX(1.4);\r\n}\r\n\r\n#menu.show {\r\n    animation-name: menu-anim;\r\n    animation-duration: 0.5s;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: normal;\r\n}\r\n\r\n#menu.hide {\r\n    animation-name: menu-anim;\r\n    animation-duration: 0.5s;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: reverse;\r\n}\r\n\r\n@keyframes menu-anim {\r\n    from {left: -100%}\r\n    to {left: 0vw}\r\n}\r\n\r\n\r\n.loading {\r\n    width: 15vw;\r\n    height: 15vw;\r\n    position: absolute;\r\n    top: calc(50% - 7vw);\r\n    left: calc(50% - 7vw);\r\n    border-radius: 7vw;\r\n    align-content: center;\r\n    display: flex;\r\n    z-index: 9999;\r\n}\r\n\r\n.loading::after {\r\n    content: "LOADING";\r\n    height: 100%;\r\n    width: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    align-self: center;\r\n    vertical-align: middle;\r\n    line-height: normal;\r\n   /*  animation-name: loading;\r\n    animation-duration: 6s;\r\n    animation-iteration-count: infinite; */\r\n    font-size: 3em;\r\n    font-family: sans-serif;\r\n    font-weight: bolder;\r\n}\r\n\r\n@keyframes loading {\r\n    from {transform: translateX(70%);}\r\n    to {transform: translateX(-100%);}\r\n  }',""])},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){var r={"./CubeLoop":[5,0,1],"./CubeLoop.js":[5,0,1],"./FloatingBio":[6,0,2],"./FloatingBio.js":[6,0,2],"./GridLoop":[2,0,3],"./GridLoop.js":[2,0,3],"./SkyscrapersLoop":[4,0,4],"./SkyscrapersLoop.js":[4,0,4],"./SunLoop":[3,0,5],"./SunLoop.js":[3,0,5]};function o(n){var e=r[n];return e?Promise.all(e.slice(1).map(t.e)).then(function(){var n=e[0];return t(n)}):Promise.resolve().then(function(){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e})}o.keys=function(){return Object.keys(r)},o.id=11,n.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
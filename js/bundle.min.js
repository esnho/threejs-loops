!function(n){function e(e){for(var t,i,r=e[0],a=e[1],s=0,l=[];s<r.length;s++)i=r[s],o[i]&&l.push(o[i][0]),o[i]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t]);for(u&&u(e);l.length;)l.shift()()}var t={},o={8:0};function i(e){if(t[e])return t[e].exports;var o=t[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise(function(e,i){t=o[n]=[e,i]});e.push(t[2]=r);var a,s=document.getElementsByTagName("head")[0],u=document.createElement("script");u.charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.src=function(n){return i.p+"./js/"+({0:"vendors~CubeLoop~FloatingBio~GridLoop~MorphingSphere~SkyscrapersLoop~SunLoop~basic-scene",1:"CubeLoop",2:"FloatingBio",3:"GridLoop",4:"MorphingSphere",5:"SkyscrapersLoop",6:"SunLoop",7:"basic-scene"}[n]||n)+".bundle.js"}(n),a=function(e){u.onerror=u.onload=null,clearTimeout(l);var t=o[n];if(0!==t){if(t){var i=e&&("load"===e.type?"missing":e.type),r=e&&e.target&&e.target.src,a=new Error("Loading chunk "+n+" failed.\n("+i+": "+r+")");a.type=i,a.request=r,t[1](a)}o[n]=void 0}};var l=setTimeout(function(){a({type:"timeout",target:u})},12e4);u.onerror=u.onload=a,s.appendChild(u)}return Promise.all(e)},i.m=n,i.c=t,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)i.d(t,o,function(e){return n[e]}.bind(null,o));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="",i.oe=function(n){throw console.error(n),n};var r=window.webpackJsonp=window.webpackJsonp||[],a=r.push.bind(r);r.push=e,r=r.slice();for(var s=0;s<r.length;s++)e(r[s]);var u=a;i(i.s=8)}([function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var i=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[t].concat(r).concat([i]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<n.length;i++){var a=n[i];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var o,i,r={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),s=function(n){var e={};return function(n){if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),u=null,l=0,c=[],d=t(11);function f(n,e){for(var t=0;t<n.length;t++){var o=n[t],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(y(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:s}}}}function p(n,e){for(var t=[],o={},i=0;i<n.length;i++){var r=n[i],a=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};o[a]?o[a].parts.push(s):t.push(o[a]={id:a,parts:[s]})}return t}function h(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=c[c.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),c.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,i)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=c.indexOf(n);e>=0&&c.splice(e,1)}function v(n){var e=document.createElement("style");return n.attrs.type="text/css",b(e,n.attrs),h(n,e),e}function b(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function y(n,e){var t,o,i,r;if(e.transform&&n.css){if(!(r=e.transform(n.css)))return function(){};n.css=r}if(e.singleton){var a=l++;t=u||(u=v(e)),o=L.bind(null,t,a,!1),i=L.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",b(e,n.attrs),h(n,e),e}(e),o=function(n,e,t){var o=t.css,i=t.sourceMap,r=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||r)&&(o=d(o));i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),i=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=v(e),o=function(n,e){var t=e.css,o=e.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){m(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else i()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=p(n,e);return f(t,e),function(n){for(var o=[],i=0;i<t.length;i++){var a=t[i];(s=r[a.id]).refs--,o.push(s)}n&&f(p(n,e),e);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete r[s.id]}}}};var g,w=(g=[],function(n,e){return g[n]=e,g.filter(Boolean).join("\n")});function L(n,e,t,o){var i=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=w(e,i);else{var r=document.createTextNode(i),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(r,a[e]):n.appendChild(r)}}},,,,,,,function(n,e,t){"use strict";t.r(e);t(9);function o(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}(new(function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.loops=[]}var e,i,r;return e=n,(i=[{key:"Init",value:function(){this.CreateMenu(),this.AddCloseRendererToMenu(),this.PopulateMenu(),this.CreateOpenMenuButton()}},{key:"CreateMenu",value:function(){this.menu=document.createElement("ul"),this.menu.setAttribute("id","menu"),this.menu.setAttribute("class","show"),document.body.appendChild(this.menu)}},{key:"AddCloseRendererToMenu",value:function(){var n=this;this.menu.appendChild(this.MenuElement("Close rendering",function(e){n.DestroyScene(),n.SelectMenuVoice(e.target)}))}},{key:"PopulateMenu",value:function(){this.loops.push(this.AddLoopButton("Cube Loop","CubeLoop.js")),this.loops.push(this.AddLoopButton("Grid Loop 0","GridLoop.js")),this.loops.push(this.AddLoopButton("Skyscrapers","SkyscrapersLoop.js")),this.loops.push(this.AddLoopButton("Sun Loop","SunLoop.js")),this.loops.push(this.AddLoopButton("Floating Bio","FloatingBio.js")),this.loops.push(this.AddLoopButton("Morphing Sphere","MorphingSphere.js"))}},{key:"AddLoopButton",value:function(n,e){var t=this,o=this.MenuElement(n,function(n){return t.StartLoop(n.target)});return o.setAttribute("loopName",e),this.menu.appendChild(o)}},{key:"MenuElement",value:function(n,e){var t=document.createElement("li");return t.innerHTML=n,t.addEventListener("click",e),t}},{key:"StartLoop",value:function(n){var e=this;this.SelectMenuVoice(n),console.log("starting loop"),this.StartLoading(),t(12)("./"+n.getAttribute("loopname")).then(function(n){var t=n.default;e.InstantiateLoop(t)})}},{key:"StartLoading",value:function(){this.loading||(this.loading=document.createElement("div"),this.loading.className="loading",document.body.append(this.loading))}},{key:"StopLoading",value:function(){this.loading&&(this.loading.remove(),this.loading=null)}},{key:"SelectMenuVoice",value:function(n){var e=!0,t=!1,o=void 0;try{for(var i,r=this.menu.childNodes[Symbol.iterator]();!(e=(i=r.next()).done);e=!0){i.value.classList.remove("selected")}}catch(n){t=!0,o=n}finally{try{e||null==r.return||r.return()}finally{if(t)throw o}}n.classList.add("selected")}},{key:"InstantiateLoop",value:function(n){var e=this;this.DestroyScene(),Promise.all([t.e(0),t.e(7)]).then(t.bind(null,13)).then(function(t){e.basicScene=new t.default,e.basicScene.InitScene(),e.loop=new n({scene:e.basicScene,onLoad:function(){return e.StopLoading()}}),e.basicScene.Add(e.loop)})}},{key:"CreateOpenMenuButton",value:function(){var n=this,e=document.createElement("a");e.innerHTML="&#9776",e.setAttribute("id","menu-ctrl"),e.addEventListener("click",function(){return n.ShowHideMenu()}),document.body.appendChild(e)}},{key:"ShowHideMenu",value:function(){var n=this.menu.getAttribute("class");this.menu.classList.remove(n),this.menu.offsetWidth,this.menu.classList.add("hide"===n?"show":"hide")}},{key:"DestroyScene",value:function(){this.basicScene&&(this.basicScene.Destroy(),this.basicScene=null)}}])&&o(e.prototype,i),r&&o(e,r),n}())).Init()},function(n,e,t){var o=t(10);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(0)(void 0)).push([n.i,'body {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-direction: row;\n    overflow: hidden;\n    background-color: lightgray;\n}\n\ncanvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: -10;\n}\n\n\n#menu {\n    position: absolute;\n    top: 0;\n    height: 100vh;\n    background: white;\n    padding: 0.5em 2em 0 1.0em;\n    margin: 0;\n    display: flex;\n    flex-flow: column;\n    font-size: 3em;\n    opacity: 0.7;\n}\n\n\n@media only screen \nand (min-device-width: 768px) \nand (max-device-width: 1024px)\nand (-webkit-min-device-pixel-ratio: 2) { \n    #menu {\n        font-size: 1.3em;\n    }\n}\n\n@media only screen\nand (min-device-width : 360px)\nand (max-device-width : 640px){\n    #menu {\n        font-size: 1.3em;\n    }\n}\n\n@media only screen  \nand (max-device-width: 500px)\nand (-webkit-min-device-pixel-ratio: 3)\nand (orientation: portrait) { \n      #menu {\n          font-size: 1.35em;\n      }\n  }\n\n@media only screen  \nand (max-device-width: 1024px)\nand (-webkit-min-device-pixel-ratio: 3)\nand (orientation: landscape) { \n    #menu {\n        font-size: 1.35em;\n    }\n}\n\n@media only screen \nand (min-device-width: 1025px)\nand (orientation: landscape) {\n    #menu {\n        font-size: 1em;\n    }\n}\n\n#menu li {\n    margin: 0.1em 0;\n    list-style: none;\n    font-family: monospace;\n    font-variant: all-small-caps;\n    font-size: 1.3em;\n    cursor: pointer;\n    position: relative;\n    display: block;\n    margin-bottom: 0.2em;\n    padding: 0.5em 0;\n}\n\n#menu li:hover {\n    text-shadow: 2px 2px gray;\n    left: -2px;\n    top: -2px;\n    color: lightgray;\n}\n\n#menu li.selected {\n    font-weight: bold;\n}\n\n#menu-ctrl {\n    position: absolute;\n    left: 0.1em;\n    bottom: 0.1em;\n    display: block;\n    font-size: 2.5em;\n    color: #f5f5f5;\n    text-shadow: 2px 2px #999;\n    cursor: pointer;\n    transform: translate(35%, 0) scaleX(1.4);\n}\n\n#menu.show {\n    animation-name: menu-anim;\n    animation-duration: 0.5s;\n    animation-fill-mode: forwards;\n    animation-direction: normal;\n}\n\n#menu.hide {\n    animation-name: menu-anim;\n    animation-duration: 0.5s;\n    animation-fill-mode: forwards;\n    animation-direction: reverse;\n}\n\n@keyframes menu-anim {\n    from {left: -100%}\n    to {left: 0vw}\n}\n\n\n.loading {\n    width: 15vw;\n    height: 15vw;\n    position: absolute;\n    top: calc(50% - 7vw);\n    left: calc(50% - 7vw);\n    border-radius: 7vw;\n    align-content: center;\n    display: flex;\n    z-index: 9999;\n}\n\n.loading::after {\n    content: "LOADING";\n    height: 100%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    align-self: center;\n    vertical-align: middle;\n    line-height: normal;\n   /*  animation-name: loading;\n    animation-duration: 6s;\n    animation-iteration-count: infinite; */\n    font-size: 3em;\n    font-family: sans-serif;\n    font-weight: bolder;\n}\n\n@keyframes loading {\n    from {transform: translateX(70%);}\n    to {transform: translateX(-100%);}\n  }',""])},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var i,r=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r)?n:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?t+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(n,e,t){var o={"./CubeLoop":[6,0,1],"./CubeLoop.js":[6,0,1],"./FloatingBio":[7,0,2],"./FloatingBio.js":[7,0,2],"./GridLoop":[2,0,3],"./GridLoop.js":[2,0,3],"./MorphingSphere":[3,0,4],"./MorphingSphere.js":[3,0,4],"./SkyscrapersLoop":[5,0,5],"./SkyscrapersLoop.js":[5,0,5],"./SunLoop":[4,0,6],"./SunLoop.js":[4,0,6]};function i(n){var e=o[n];return e?Promise.all(e.slice(1).map(t.e)).then(function(){var n=e[0];return t(n)}):Promise.resolve().then(function(){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e})}i.keys=function(){return Object.keys(o)},i.id=12,n.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
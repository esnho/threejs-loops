(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{17:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(16);var r=function t(e){var n=e.size,r=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var c=1,s=1,u=1;this.color=new o.Color,this.color.setRGB(c,s,u),this.material=i||new o.MeshBasicMaterial({color:this.color}),this.geometry=new o.BoxGeometry(r,r,r),this.mesh=new o.Mesh(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},18:function(t,e,n){"use strict";n.d(e,"a",function(){return f});var o=n(16);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var u={intensity:1},f=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,s=new Array(r),f=0;f<r;f++)s[f]=arguments[f];(n=a(this,(t=c(e)).call.apply(t,[this].concat(s)))).params=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),o.forEach(function(e){i(t,e,n[e])})}return t}({},u,s[0]);var p=new o.HemisphereLight(16777215,16777215,1.5*n.params.intensity);return p.color.setHSL(l(325),.9,.94),p.groundColor.setHSL(l(325),.9,.64),p.position.set(0,2,0),n.add(p),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["Group"]),e}();function l(t){return t/360}},2:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return c});var o=n(16),r=n(18),i=n(17);function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var c=function(){function t(e){var n=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var c=n.camera.aspect;this.scene=n,n.camera=new o.OrthographicCamera(7*c/-2,7*c/2,3.5,-3.5,.1,150),n.camera.position.copy(new o.Vector3(10,10,10)),n.camera.lookAt(new o.Vector3(0,0,0)),this.root=new o.Group;var s=new r.a;this.root.add(s);var u=new o.MeshStandardMaterial({color:16777215,metalness:.4,roughness:.2});this.cubes=[];this.cubesParent=new o.Group;for(var f=-11;f<11;f++)for(var l=-11;l<11;l++){var p=new i.a({size:1,material:u,position:new o.Vector3(f,0,l)});p.root.scale.copy(new o.Vector3(1,2,1)),this.cubesParent.add(p.root),this.cubes.push(p)}this.root.add(this.cubesParent),a&&a()}var e,n,c;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var r=this.cubesParent.children[n],i=r.position;i.y=Math.sin(n*Math.PI*.25+e),r.position.copy(i)}this.scene.camera.position.copy(new o.Vector3(10*Math.sin(.5*t),10,10*Math.cos(.5*t))),this.scene.camera.lookAt(new o.Vector3(0,0,0)),this.scene.camera.updateProjectionMatrix()}}])&&a(e.prototype,n),c&&a(e,c),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
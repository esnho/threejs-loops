(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{12:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(11);var r=function t(e){var n=e.size,r=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new o.d,this.color.setRGB(s,c,u),this.material=i||new o.i({color:this.color}),this.geometry=new o.b(r,r,r),this.mesh=new o.h(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},4:function(t,e,n){"use strict";n.r(e);var o=n(11);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var n=new o.g(16777215,16777215,1.5);return n.color.setHSL(u(325),.9,.94),n.groundColor.setHSL(u(325),.9,.64),n.position.set(0,2,0),t.add(n),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["f"]),e}();function u(t){return t/360}var f=n(12);function p(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}n.d(e,"default",function(){return h});var h=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=e.camera.aspect;this.scene=e,e.camera=new o.k(7*n/-2,7*n/2,3.5,-3.5,.1,150),e.camera.position.copy(new o.p(10,10,10)),e.camera.lookAt(new o.p(0,0,0)),this.root=new o.f;var r=new c;this.root.add(r);var i=new o.j({color:16777215,metalness:.4,roughness:.2});this.cubes=[];this.cubesParent=new o.f;for(var a=-11;a<11;a++)for(var s=-11;s<11;s++){var u=new f.a({size:1,material:i,position:new o.p(a,0,s)});u.root.scale.copy(new o.p(1,2,1)),this.cubesParent.add(u.root),this.cubes.push(u)}this.root.add(this.cubesParent)}var e,n,r;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var r=this.cubesParent.children[n],i=r.position;i.y=Math.sin(n*Math.PI*.25+e),r.position.copy(i)}this.scene.camera.position.copy(new o.p(10*Math.sin(.5*t),10,10*Math.cos(.5*t))),this.scene.camera.lookAt(new o.p(0,0,0)),this.scene.camera.updateProjectionMatrix()}}])&&p(e.prototype,n),r&&p(e,r),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
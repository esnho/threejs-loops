(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{15:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(14);var r=function t(e){var n=e.size,r=void 0===n?5:n,i=e.material,a=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new o.d,this.color.setRGB(s,c,u),this.material=i||new o.l({color:this.color}),this.geometry=new o.b(r,r,r),this.mesh=new o.k(this.geometry,this.material),a&&this.mesh.position.copy(a),this.root=this.mesh}},16:function(t,e,n){"use strict";n.d(e,"a",function(){return c});var o=n(14);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=i(this,a(e).call(this));var n=new o.i(16777215,16777215,1.5);return n.color.setHSL(u(325),.9,.94),n.groundColor.setHSL(u(325),.9,.64),n.position.set(0,2,0),t.add(n),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["h"]),e}();function u(t){return t/360}},2:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return s});var o=n(14),r=n(16),i=n(15);function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=function(){function t(e){var n=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var s=n.camera.aspect;this.scene=n,n.camera=new o.n(7*s/-2,7*s/2,3.5,-3.5,.1,150),n.camera.position.copy(new o.t(10,10,10)),n.camera.lookAt(new o.t(0,0,0)),this.root=new o.h;var c=new r.a;this.root.add(c);var u=new o.m({color:16777215,metalness:.4,roughness:.2});this.cubes=[];this.cubesParent=new o.h;for(var f=-11;f<11;f++)for(var h=-11;h<11;h++){var l=new i.a({size:1,material:u,position:new o.t(f,0,h)});l.root.scale.copy(new o.t(1,2,1)),this.cubesParent.add(l.root),this.cubes.push(l)}this.root.add(this.cubesParent),a&&a()}var e,n,s;return e=t,(n=[{key:"update",value:function(t){for(var e=3*t,n=0;n<this.cubesParent.children.length;n++){var r=this.cubesParent.children[n],i=r.position;i.y=Math.sin(n*Math.PI*.25+e),r.position.copy(i)}this.scene.camera.position.copy(new o.t(10*Math.sin(.5*t),10,10*Math.cos(.5*t))),this.scene.camera.lookAt(new o.t(0,0,0)),this.scene.camera.updateProjectionMatrix()}}])&&a(e.prototype,n),s&&a(e,s),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{13:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var o=n(12);var r=function t(e){var n=e.size,r=void 0===n?5:n,a=e.material,i=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new o.d,this.color.setRGB(s,c,u),this.material=a||new o.i({color:this.color}),this.geometry=new o.b(r,r,r),this.mesh=new o.h(this.geometry,this.material),i&&this.mesh.position.copy(i),this.root=this.mesh}},5:function(t,e,n){"use strict";n.r(e);var o=n(12);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function i(t){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),t=a(this,i(e).call(this));var n=new o.g(16777215,16777215,1.5);return n.color.setHSL(u(250),.9,.94),n.groundColor.setHSL(u(250),.9,.44),n.position.set(0,2,0),t.add(n),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o["f"]),e}();function u(t){return t/360}var l=n(13);function h(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}n.d(e,"default",function(){return p});var p=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=new o.d;n.setIntHSL(48,90,64),e.renderer.setClearColor(n);var r=e.camera.aspect;e.camera=new o.k(10*r/-2,10*r/2,5,-5,1,150),e.camera.position.copy(new o.p(-10,10,10)),e.camera.lookAt(new o.p(0,0,0)),this.root=new o.f;var a=new c;this.root.add(a);var i=new o.j({color:16777215,metalness:.4,roughness:.2});this.cubes=[new l.a({size:2,material:i,position:new o.p(-1,1,1)}),new l.a({size:2,material:i,position:new o.p(1,1,1)}),new l.a({size:2,material:i,position:new o.p(-1,1,-1)}),new l.a({size:2,material:i,position:new o.p(1,1,-1)}),new l.a({size:2,material:i,position:new o.p(-1,-1,1)}),new l.a({size:2,material:i,position:new o.p(1,-1,1)}),new l.a({size:2,material:i,position:new o.p(-1,-1,-1)}),new l.a({size:2,material:i,position:new o.p(1,-1,-1)})],this.cubesParent=new o.f;var s=!0,u=!1,h=void 0;try{for(var p,f=this.cubes[Symbol.iterator]();!(s=(p=f.next()).done);s=!0){var w=p.value;this.cubesParent.add(w.root)}}catch(t){u=!0,h=t}finally{try{s||null==f.return||f.return()}finally{if(u)throw h}}this.cubesParent.position.copy(new o.p(1,-1,-1)),this.root.add(this.cubesParent)}var e,n,r;return e=t,(n=[{key:"update",value:function(t){var e=3*t;e%(2*Math.PI)<Math.PI?this.firstSection(e):this.secondSection(e)}},{key:"firstSection",value:function(t){var e=Math.sin(.5*t),n=Math.abs(e);this.cubesParent.children[7].position.copy(new o.p(1,-1,-1));for(var r=0;r<this.cubesParent.children.length;r++){var a=this.cubesParent.children[r],i=Math.clamp((1-n)*(.5*Math.PI)+.125*r,0,1),s=new o.p(i,i,i);a.scale.copy(s),a.rotation.z=i*Math.PI,a.rotation.x=i*Math.PI*.5}}},{key:"secondSection",value:function(t){var e=Math.sin(.5*t),n=Math.abs(e),r=Math.cos(.5*t),a=Math.abs(r),i=this.cubesParent.children[7],s=Math.clamp((1-n)*(.5*Math.PI)+.875+a,0,2),c=new o.p(s,s,s);i.scale.copy(c),i.rotation.z=s*Math.PI,i.rotation.x=s*Math.PI*.5;var u=new o.p(1,-1,-1);i.position.copy(u.lerp(new o.p(0,0,0),Math.clamp(6*(1-n),0,1)));for(var l=0;l<this.cubesParent.children.length-1;l++){var h=this.cubesParent.children[l],p=Math.clamp(Math.clamp((1-n)*(.5*Math.PI)+.125*l,0,1)-a,0,1),f=new o.p(p,p,p);h.scale.copy(f),h.rotation.z=p*Math.PI,h.rotation.x=p*Math.PI*.5}}}])&&h(e.prototype,n),r&&h(e,r),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
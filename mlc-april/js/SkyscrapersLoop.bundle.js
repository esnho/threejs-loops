(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{29:function(e,t,o){"use strict";o.d(t,"a",function(){return n});var r=o(28);var n=function e(t){var o=t.size,n=void 0===o?5:o,a=t.material,i=t.position;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var s=1,c=1,u=1;this.color=new r.Color,this.color.setRGB(s,c,u),this.material=a||new r.MeshBasicMaterial({color:this.color}),this.geometry=new r.BoxGeometry(n,n,n),this.mesh=new r.Mesh(this.geometry,this.material),i&&this.mesh.position.copy(i),this.root=this.mesh}},30:function(e,t,o){"use strict";o.d(t,"a",function(){return c});var r=o(28);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=a(this,i(t).call(this));var o=new r.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),e.add(o),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r["Group"]),t}()},31:function(e,t,o){"use strict";o.d(t,"a",function(){return n});var r=o(28);var n=function e(t){var o=t.size,n=void 0===o?5:o,a=t.material,i=t.position,s=t.widthSegments,c=t.heightSegments,u=t.castShadow,h=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,f=1,p=1;this.color=new r.Color,this.color.setRGB(l,f,p),this.material=a||new r.MeshBasicMaterial({color:this.color});var d=this.material.length>1?r.SphereBufferGeometry:r.SphereGeometry;if(this.geometry=new d(n,s||7,c||9),this.material.length){this.geometry.clearGroups();for(var y=0;y<a.length;y++)this.geometry.addGroup(0,1/0,y)}this.mesh=new r.Mesh(this.geometry,this.material),this.mesh.castShadow=u,this.mesh.receiveShadow=h,i&&this.mesh.position.copy(i),this.root=this.mesh}},33:function(e,t,o){"use strict";o.d(t,"a",function(){return l});var r=o(28);o(30);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=new Array(n),u=0;u<n;u++)i[u]=arguments[u];o=s(this,(e=c(t)).call.apply(e,[this].concat(i)));var l=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},r=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),r.forEach(function(t){a(e,t,o[t])})}return e}({},h,i[0]),f=l.intensity,p=l.castShadow,d=l.bias,y=l.projectionSides,w=l.mapSize;o.intensity=f,o.projectionSides=y,o.mapSize=w,console.log("mapsize",o.mapSize);var m=new r.DirectionalLight("white",.65*o.intensity),v=new r.DirectionalLight("white",.55*o.intensity);return m.shadow.bias=d||0,v.shadow.bias=d||0,m.castShadow=p,v.castShadow=p,o.updateProjection(m,o.projectionSides),o.updateProjection(v,o.projectionSides),o.updateShadowMap(m,o.mapSize),o.updateShadowMap(v,o.mapSize),m.position.copy(new r.Vector3(9,3.5,0)),v.position.copy(new r.Vector3(-10,2,0)),o.add(m,v),o}var o,n,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r["Group"]),o=t,(n=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&i(o.prototype,n),l&&i(o,l),t}()},40:function(e,t,o){var r=o(41);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};o(1)(r,n);r.locals&&(e.exports=r.locals)},41:function(e,t,o){t=e.exports=o(0)(!1);var r=o(42),n=r(o(43)),a=r(o(44));t.push([e.i,"/* vt323-400normal - latin */\n@font-face {\n  font-family: 'VT323';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('VT323 Regular '),\n    local('VT323-Regular'),\n    url("+n+") format('woff2'), \n    url("+a+") format('woff'); /* Modern Browsers */\n}\n\n",""])},42:function(e,t,o){"use strict";e.exports=function(e,t){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)||t?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},43:function(e,t,o){e.exports=o.p+"fonts/vt323-latin-400.woff2"},44:function(e,t,o){e.exports=o.p+"fonts/vt323-latin-400.woff"},6:function(e,t,o){"use strict";o.r(t),o.d(t,"default",function(){return u});var r=o(28),n=o(33),a=o(30),i=o(29),s=o(31);function c(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}o(40);var u=function(){function e(t){var o=t.scene,n=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=o,this.editScene(),this.root=new r.Group,this.addLights(),this.addSkyscrapers(),this.addSky(),this.addGround(),this.addWhereAreYou(),n&&n()}var t,o,u;return t=e,(o=[{key:"addLights",value:function(){var e=new n.a;this.root.add(e);var t=new a.a;this.root.add(t)}},{key:"editScene",value:function(){var e=this.scene.camera.aspect,t=new r.Color;t.setIntHSL(244,30,8),this.scene.renderer.setClearColor(t),this.scene.camera=new r.OrthographicCamera(7*e/-2,7*e/2,3.5,-3.5,.1,150),this.scene.camera.position.copy(new r.Vector3(10,10,10)),this.scene.camera.lookAt(new r.Vector3(0,0,0))}},{key:"addSkyscrapers",value:function(){var e=new r.MeshStandardMaterial({color:4276048,metalness:.3,roughness:.2}),t=new r.MeshBasicMaterial({color:2301751}),o=new r.MeshBasicMaterial({color:13421789});this.cubes=[];this.cubesParent=new r.Group;for(var n=-5;n<5;n++)for(var a=-5;a<5;a++){for(var s=new i.a({size:1,material:e,position:new r.Vector3(1.5*n+(Math.random()-.5),0,1.5*a)}),c=0;c<80;c++){var u=Math.random()>.5?.5:-.5;if(!(u<0)){var h=.8*Math.random()-.4,l=Math.random()*(Math.random()>.5?.4:-.4);h=.1*Math.round(10*h),l=.2*Math.round(5*l);var f=new i.a({size:.05,material:Math.random()>.1?t:o,position:new r.Vector3(l,h,u)});s.root.add(f.root)}}s.root.scale.copy(new r.Vector3(1,2,1)),this.cubesParent.add(s.root),this.cubes.push(s)}this.root.add(this.cubesParent)}},{key:"addSky",value:function(){var e=new r.MeshStandardMaterial({color:328489,metalness:.1,roughness:.9,side:r.BackSide}),t=new r.MeshBasicMaterial({color:13421789,side:r.BackSide,wireframe:!0}),o=new s.a({size:5,position:new r.Vector3(-.5,1,0),material:e,heightSegments:72,widthSegments:128});o.root.scale.copy(new r.Vector3(10,9.25,10)),this.root.add(o.root);for(var n=0;n<120;n++){var a=Math.random()*Math.PI*2,i=Math.random()*Math.PI*.6,c=new s.a({size:.018,material:t,position:new r.Vector3(20*Math.sin(a),8*Math.cos(i),-10)});this.root.add(c.root)}}},{key:"addGround",value:function(){var e=new r.MeshStandardMaterial({color:1250067,metalness:.7,roughness:.9,flatShading:!0}),t=new s.a({size:3,position:new r.Vector3(0,-1,0),material:e});t.root.scale.copy(new r.Vector3(5,.5,4)),this.root.add(t.root)}},{key:"addWhereAreYou",value:function(){this.whereAreYou=document.createElement("h1"),this.whereAreYou.innerHTML="where are you",this.whereAreYou.style.margin="auto",this.whereAreYou.style.marginTop="30vh",this.whereAreYou.style.verticalAlign="middle",this.whereAreYou.style.fontFamily="'VT323', monospace",this.whereAreYou.style.color="antiquewhite",this.whereAreYou.style.fontWeight="lighter",this.whereAreYou.style.cursor="default",this.whereAreYou.style.letterSpacing="0.2em",document.body.appendChild(this.whereAreYou)}},{key:"update",value:function(e){var t=.2*e;this.updateSkyscrapers(t),this.updateCamera(e)}},{key:"updateSkyscrapers",value:function(e){for(var t=0;t<this.cubesParent.children.length;t++){var o=this.cubesParent.children[t],r=o.position;r.y=Math.sin(t*Math.PI*.25+e),o.position.copy(r)}}},{key:"updateCamera",value:function(e){this.scene.camera.position.copy(new r.Vector3(10*Math.cos(.12*e)+2,Math.cos(.2*e)+1,30)),this.scene.camera.lookAt(new r.Vector3(0,2.5,6)),this.scene.camera.updateProjectionMatrix()}},{key:"onRemove",value:function(){document.body.removeChild(this.whereAreYou)}}])&&c(t.prototype,o),u&&c(t,u),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{30:function(e,t,o){"use strict";o.d(t,"a",function(){return c});var r=o(28);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=i(this,a(t).call(this));var o=new r.HemisphereLight(16777215,16777215,3);return o.color.setHSL(Math.NormalizeHue(325),.1,.94),o.groundColor.setHSL(Math.NormalizeHue(325),.1,.64),o.position.set(0,2,0),e.add(o),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r["Group"]),t}()},31:function(e,t,o){"use strict";o.d(t,"a",function(){return n});var r=o(28);var n=function e(t){var o=t.size,n=void 0===o?5:o,i=t.material,a=t.position,s=t.widthSegments,c=t.heightSegments,u=t.castShadow,h=t.receiveShadow;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.seed=Math.random();var l=1,p=1,f=1;this.color=new r.Color,this.color.setRGB(l,p,f),this.material=i||new r.MeshBasicMaterial({color:this.color});var d=this.material.length>1?r.SphereBufferGeometry:r.SphereGeometry;if(this.geometry=new d(n,s||7,c||9),this.material.length){this.geometry.clearGroups();for(var y=0;y<i.length;y++)this.geometry.addGroup(0,1/0,y)}this.mesh=new r.Mesh(this.geometry,this.material),this.mesh.castShadow=u,this.mesh.receiveShadow=h,a&&this.mesh.position.copy(a),this.root=this.mesh}},33:function(e,t,o){"use strict";o.d(t,"a",function(){return l});var r=o(28);o(30);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h={intensity:1,castShadow:!1,bias:0,projectionSides:void 0,mapSize:512},l=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,a=new Array(n),u=0;u<n;u++)a[u]=arguments[u];o=s(this,(e=c(t)).call.apply(e,[this].concat(a)));var l=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},r=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),r.forEach(function(t){i(e,t,o[t])})}return e}({},h,a[0]),p=l.intensity,f=l.castShadow,d=l.bias,y=l.projectionSides,w=l.mapSize;o.intensity=p,o.projectionSides=y,o.mapSize=w,console.log("mapsize",o.mapSize);var m=new r.DirectionalLight("white",.65*o.intensity),b=new r.DirectionalLight("white",.55*o.intensity);return m.shadow.bias=d||0,b.shadow.bias=d||0,m.castShadow=f,b.castShadow=f,o.updateProjection(m,o.projectionSides),o.updateProjection(b,o.projectionSides),o.updateShadowMap(m,o.mapSize),o.updateShadowMap(b,o.mapSize),m.position.copy(new r.Vector3(9,3.5,0)),b.position.copy(new r.Vector3(-10,2,0)),o.add(m,b),o}var o,n,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r["Group"]),o=t,(n=[{key:"updateProjection",value:function(e,t){e.shadow.camera.left=-t,e.shadow.camera.right=t,e.shadow.camera.updateProjectionMatrix()}},{key:"updateShadowMap",value:function(e,t){e.shadow.mapSize.width=t,e.shadow.mapSize.height=t}}])&&a(o.prototype,n),l&&a(o,l),t}()},45:function(e,t,o){e.exports=o.p+"obj/Lowpoly_tree_sample.obj"},8:function(e,t,o){"use strict";o.r(t),o.d(t,"default",function(){return h});var r=o(28),n=o(45),i=o.n(n),a=o(31),s=o(33),c=o(34);function u(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t){var o=t.scene,n=t.onLoad;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=o,o.renderer.shadowMap.enabled=!0,o.renderer.shadowMap.type=r.PCFShadowMap,this.root=new r.Group,this.sphereMaterial=new r.MeshStandardMaterial({color:16755200,flatShading:!0}),this.sphere=new a.a({size:3,material:this.sphereMaterial,widthSegments:7,heightSegments:6}),this.root.add(this.sphere.root),this.setupLights(),this.loadTree(),console.log(">>>>>>>",this.sphere),console.log(this.sphere.root.geometry),this.root.add(this.sphere.root),n&&n()}var t,o,n;return t=e,(o=[{key:"setupLights",value:function(){var e=new s.a({intensity:1.8,castShadow:!0,bias:.2,projectionSides:2.5,mapSize:2048});e.rotateY(Math.PI),this.root.add(e)}},{key:"loadTree",value:function(){var e=new c.OBJLoader;this.onHeadReady=this.onTreeReady.bind(this),this.onHeadLoading=this.onTreeLoading.bind(this),this.onTreeReady=this.onTreeReady.bind(this),e.load(i.a,this.onTreeReady,this.onTreeLoading,function(e){console.log("An error happened",e)})}},{key:"onTreeLoading",value:function(e){var t=e.loaded/e.total;console.log(100*t+"% loaded")}},{key:"onTreeReady",value:function(e){console.log(this.sphere.root.geometry);for(var t=0;t<this.sphere.root.geometry.vertices.length;t++)this.addTree(e,this.sphere.root.geometry.vertices[t])}},{key:"addTree",value:function(e,t){var o=e.clone();o.position.copy(t);o.scale.copy(new r.Vector3(.1,.1,.1));var n=new r.Vector3(0,1,0);o.quaternion.setFromUnitVectors(n,t.clone().normalize()),o.children[0].material[0].color.setRGB(1,.6,0),o.children[0].material[1].color.setRGB(.8,1,.2),this.sphere.root.add(o)}},{key:"update",value:function(e,t){this.sphere.root.rotateY(.5*t),this.sphere.root.rotateZ(.1*t);for(var o=0;o<this.sphere.root.children.length;o++){this.sphere.root.children[o].translateY(Math.cos(e+o)*t)}}}])&&u(t.prototype,o),n&&u(t,n),e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
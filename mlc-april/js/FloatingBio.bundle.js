(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{10:function(t,e,o){"use strict";o.r(e);var n=o(28),r=o(32);var a=function t(e){var o=e.size,r=void 0===o?5:o,a=e.material,i=e.position;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.seed=Math.random();var s=1,c=1,u=1;this.color=new n.Color,this.color.setRGB(s,c,u),this.material=a||new n.MeshBasicMaterial({color:this.color}),this.geometry=new n.CylinderGeometry(r,r,r),this.mesh=new n.Mesh(this.geometry,this.material),i&&this.mesh.position.copy(i),this.root=this.mesh};function i(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}o.d(e,"default",function(){return s});var s=function(){function t(e){var o=e.scene,a=e.onLoad;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scene=o,o.camera.far=350,this.scene.camera.updateProjectionMatrix();var i=new n.Color;i.setIntHSL(48,90,64),o.renderer.setClearColor(i),o.scene.fog=new n.Fog(i,.1,300),this.root=new n.Group;var s=new r.a;this.root.add(s);var c=new n.MeshStandardMaterial({color:16777215,metalness:.4,roughness:.2});this.amoebas=[];for(var u=-60;u<60;u++){var l=this.newAmeba({slices:17,amebaSize:15,material:c,xPosition:15*u*.1});this.amoebas.push(l),this.root.add(l)}a&&a()}var e,o,s;return e=t,(o=[{key:"newAmeba",value:function(t){var e=t.slices,o=t.amebaSize,r=t.material,i=t.xPosition,s=void 0===i?0:i,c=Math.PI/e*.5,u=new n.Group,l=-(this.scene.camera.far-o);u.translateZ(Math.random()*l);for(var f=-e;f<e;f++){var h=Math.cos(c*f)*o,p=Math.sin(c*f*.7)*o,y=new a({size:1,material:r,position:new n.Vector3(s*(u.position.z/(3*o)),p,0)});y.root.scale.copy(new n.Vector3(.7*h,.6*c*h,.7*h)),u.add(y.root)}return u.userData={initialPosition:u.position.clone(),randomValue:Math.random()},u}},{key:"update",value:function(t){for(var e=3*t,o=0;o<this.amoebas.length;o++)this.updateAmeba(o,e);this.updateCamera(.5*t)}},{key:"updateAmeba",value:function(t,e){for(var o=this.amoebas[t],n=0;n<o.children.length;n++){var r=o.children[n],a=r.position;r.position.copy(a),r.translateY(.12*Math.sin(e+(.08*n+o.userData.randomValue)+t*Math.PI)),r.rotateY(.005+.001*n)}var i=o.userData.initialPosition.clone(),s=(.01*e+t*Math.PI)*Math.pow(Math.abs(.01*o.position.z),.3);i.y=2*(s-Math.floor(.5+s))*250,o.position.copy(i)}},{key:"updateCamera",value:function(t){this.scene.camera.position.copy(new n.Vector3(0,14*Math.cos(t),10)),this.scene.camera.lookAt(new n.Vector3(0,0,-60)),this.scene.camera.updateProjectionMatrix()}}])&&i(e.prototype,o),s&&i(e,s),t}()},32:function(t,e,o){"use strict";o.d(e,"a",function(){return l});var n=o(28);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var u={intensity:1},l=function(t){function e(){var t,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,c=new Array(r),l=0;l<r;l++)c[l]=arguments[l];(o=i(this,(t=s(e)).call.apply(t,[this].concat(c)))).params=function(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},n=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),n.forEach(function(e){a(t,e,o[e])})}return t}({},u,c[0]);var h=new n.HemisphereLight(16777215,16777215,1.5*o.params.intensity);return h.color.setHSL(f(325),.9,.94),h.groundColor.setHSL(f(325),.9,.64),h.position.set(0,2,0),o.add(h),o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,n["Group"]),e}();function f(t){return t/360}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,